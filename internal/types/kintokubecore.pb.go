// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: kintokubecore.proto

package types

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EnvironmentQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EnvironmentQueryRequest) Reset() {
	*x = EnvironmentQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentQueryRequest) ProtoMessage() {}

func (x *EnvironmentQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentQueryRequest.ProtoReflect.Descriptor instead.
func (*EnvironmentQueryRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{0}
}

func (x *EnvironmentQueryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteEnvironmentRequest) Reset() {
	*x = DeleteEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEnvironmentRequest) ProtoMessage() {}

func (x *DeleteEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*DeleteEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteEnvironmentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId       string       `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunConfig   *RunConfig   `protobuf:"bytes,3,opt,name=runConfig,proto3" json:"runConfig,omitempty"`
	BuildConfig *BuildConfig `protobuf:"bytes,4,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
}

func (x *CreateBlockRequest) Reset() {
	*x = CreateBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlockRequest) ProtoMessage() {}

func (x *CreateBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlockRequest.ProtoReflect.Descriptor instead.
func (*CreateBlockRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBlockRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *CreateBlockRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateBlockRequest) GetRunConfig() *RunConfig {
	if x != nil {
		return x.RunConfig
	}
	return nil
}

func (x *CreateBlockRequest) GetBuildConfig() *BuildConfig {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

type DeployBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId       string       `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunConfig   *RunConfig   `protobuf:"bytes,3,opt,name=runConfig,proto3" json:"runConfig,omitempty"`
	BuildConfig *BuildConfig `protobuf:"bytes,4,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
}

func (x *DeployBlockRequest) Reset() {
	*x = DeployBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployBlockRequest) ProtoMessage() {}

func (x *DeployBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployBlockRequest.ProtoReflect.Descriptor instead.
func (*DeployBlockRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{3}
}

func (x *DeployBlockRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *DeployBlockRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeployBlockRequest) GetRunConfig() *RunConfig {
	if x != nil {
		return x.RunConfig
	}
	return nil
}

func (x *DeployBlockRequest) GetBuildConfig() *BuildConfig {
	if x != nil {
		return x.BuildConfig
	}
	return nil
}

type BlockQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId string `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *BlockQueryRequest) Reset() {
	*x = BlockQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockQueryRequest) ProtoMessage() {}

func (x *BlockQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockQueryRequest.ProtoReflect.Descriptor instead.
func (*BlockQueryRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{4}
}

func (x *BlockQueryRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *BlockQueryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId string `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteBlockRequest) Reset() {
	*x = DeleteBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockRequest) ProtoMessage() {}

func (x *DeleteBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteBlockRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *DeleteBlockRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BlockUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseId string `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
}

func (x *BlockUpdateResponse) Reset() {
	*x = BlockUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockUpdateResponse) ProtoMessage() {}

func (x *BlockUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockUpdateResponse.ProtoReflect.Descriptor instead.
func (*BlockUpdateResponse) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{6}
}

func (x *BlockUpdateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockUpdateResponse) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type WatchBuildLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseId string `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	BlockName string `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId     string `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
}

func (x *WatchBuildLogsRequest) Reset() {
	*x = WatchBuildLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchBuildLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBuildLogsRequest) ProtoMessage() {}

func (x *WatchBuildLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBuildLogsRequest.ProtoReflect.Descriptor instead.
func (*WatchBuildLogsRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{7}
}

func (x *WatchBuildLogsRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *WatchBuildLogsRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *WatchBuildLogsRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

type WatchConsoleLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockName string `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId     string `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
}

func (x *WatchConsoleLogsRequest) Reset() {
	*x = WatchConsoleLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchConsoleLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchConsoleLogsRequest) ProtoMessage() {}

func (x *WatchConsoleLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchConsoleLogsRequest.ProtoReflect.Descriptor instead.
func (*WatchConsoleLogsRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{8}
}

func (x *WatchConsoleLogsRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *WatchConsoleLogsRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

type UpdateBuildStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockName string       `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId     string       `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId string       `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Status    *BuildStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateBuildStatusRequest) Reset() {
	*x = UpdateBuildStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBuildStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBuildStatusRequest) ProtoMessage() {}

func (x *UpdateBuildStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBuildStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateBuildStatusRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateBuildStatusRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *UpdateBuildStatusRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *UpdateBuildStatusRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *UpdateBuildStatusRequest) GetStatus() *BuildStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateBuildStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status *BuildStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateBuildStepRequest) Reset() {
	*x = UpdateBuildStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBuildStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBuildStepRequest) ProtoMessage() {}

func (x *UpdateBuildStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBuildStepRequest.ProtoReflect.Descriptor instead.
func (*UpdateBuildStepRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBuildStepRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBuildStepRequest) GetStatus() *BuildStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateBuildStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateBuildStatusResponse) Reset() {
	*x = UpdateBuildStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBuildStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBuildStatusResponse) ProtoMessage() {}

func (x *UpdateBuildStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBuildStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateBuildStatusResponse) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateBuildStatusResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type KillBlockInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvId string `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
}

func (x *KillBlockInstanceRequest) Reset() {
	*x = KillBlockInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillBlockInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillBlockInstanceRequest) ProtoMessage() {}

func (x *KillBlockInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillBlockInstanceRequest.ProtoReflect.Descriptor instead.
func (*KillBlockInstanceRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{12}
}

func (x *KillBlockInstanceRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KillBlockInstanceRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

type RollbackBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EnvId     string `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
}

func (x *RollbackBlockRequest) Reset() {
	*x = RollbackBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollbackBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackBlockRequest) ProtoMessage() {}

func (x *RollbackBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackBlockRequest.ProtoReflect.Descriptor instead.
func (*RollbackBlockRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{13}
}

func (x *RollbackBlockRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RollbackBlockRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *RollbackBlockRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type CustomDomainNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId            string `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockName        string `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	CustomDomainName string `protobuf:"bytes,3,opt,name=customDomainName,proto3" json:"customDomainName,omitempty"`
	CNAME            string `protobuf:"bytes,4,opt,name=CNAME,proto3" json:"CNAME,omitempty"`
}

func (x *CustomDomainNameRequest) Reset() {
	*x = CustomDomainNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDomainNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDomainNameRequest) ProtoMessage() {}

func (x *CustomDomainNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDomainNameRequest.ProtoReflect.Descriptor instead.
func (*CustomDomainNameRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{14}
}

func (x *CustomDomainNameRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *CustomDomainNameRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *CustomDomainNameRequest) GetCustomDomainName() string {
	if x != nil {
		return x.CustomDomainName
	}
	return ""
}

func (x *CustomDomainNameRequest) GetCNAME() string {
	if x != nil {
		return x.CNAME
	}
	return ""
}

type CheckCustomDomainNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCNAMEOK          bool   `protobuf:"varint,1,opt,name=isCNAMEOK,proto3" json:"isCNAMEOK,omitempty"`
	CNAMEWanted        string `protobuf:"bytes,2,opt,name=CNAMEWanted,proto3" json:"CNAMEWanted,omitempty"`
	CNAMEFound         string `protobuf:"bytes,3,opt,name=CNAMEFound,proto3" json:"CNAMEFound,omitempty"`
	IsCertificateReady bool   `protobuf:"varint,4,opt,name=isCertificateReady,proto3" json:"isCertificateReady,omitempty"`
}

func (x *CheckCustomDomainNameResponse) Reset() {
	*x = CheckCustomDomainNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCustomDomainNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCustomDomainNameResponse) ProtoMessage() {}

func (x *CheckCustomDomainNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCustomDomainNameResponse.ProtoReflect.Descriptor instead.
func (*CheckCustomDomainNameResponse) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{15}
}

func (x *CheckCustomDomainNameResponse) GetIsCNAMEOK() bool {
	if x != nil {
		return x.IsCNAMEOK
	}
	return false
}

func (x *CheckCustomDomainNameResponse) GetCNAMEWanted() string {
	if x != nil {
		return x.CNAMEWanted
	}
	return ""
}

func (x *CheckCustomDomainNameResponse) GetCNAMEFound() string {
	if x != nil {
		return x.CNAMEFound
	}
	return ""
}

func (x *CheckCustomDomainNameResponse) GetIsCertificateReady() bool {
	if x != nil {
		return x.IsCertificateReady
	}
	return false
}

type EnablePublicURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockName string `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId     string `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId string `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
}

func (x *EnablePublicURLRequest) Reset() {
	*x = EnablePublicURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnablePublicURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnablePublicURLRequest) ProtoMessage() {}

func (x *EnablePublicURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnablePublicURLRequest.ProtoReflect.Descriptor instead.
func (*EnablePublicURLRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{16}
}

func (x *EnablePublicURLRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *EnablePublicURLRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *EnablePublicURLRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

type DisablePublicURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockName string `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId     string `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
}

func (x *DisablePublicURLRequest) Reset() {
	*x = DisablePublicURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisablePublicURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisablePublicURLRequest) ProtoMessage() {}

func (x *DisablePublicURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisablePublicURLRequest.ProtoReflect.Descriptor instead.
func (*DisablePublicURLRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{17}
}

func (x *DisablePublicURLRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *DisablePublicURLRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

type AbortBlockReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockName string `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId string `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	EnvId     string `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
}

func (x *AbortBlockReleaseRequest) Reset() {
	*x = AbortBlockReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortBlockReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortBlockReleaseRequest) ProtoMessage() {}

func (x *AbortBlockReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortBlockReleaseRequest.ProtoReflect.Descriptor instead.
func (*AbortBlockReleaseRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{18}
}

func (x *AbortBlockReleaseRequest) GetBlockName() string {
	if x != nil {
		return x.BlockName
	}
	return ""
}

func (x *AbortBlockReleaseRequest) GetReleaseId() string {
	if x != nil {
		return x.ReleaseId
	}
	return ""
}

func (x *AbortBlockReleaseRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

type TeleportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvId   string `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockId string `protobuf:"bytes,2,opt,name=blockId,proto3" json:"blockId,omitempty"`
}

func (x *TeleportRequest) Reset() {
	*x = TeleportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeleportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeleportRequest) ProtoMessage() {}

func (x *TeleportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeleportRequest.ProtoReflect.Descriptor instead.
func (*TeleportRequest) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{19}
}

func (x *TeleportRequest) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

func (x *TeleportRequest) GetBlockId() string {
	if x != nil {
		return x.BlockId
	}
	return ""
}

type TeleportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChiselHost        string `protobuf:"bytes,1,opt,name=chiselHost,proto3" json:"chiselHost,omitempty"`
	ChiselCredentials string `protobuf:"bytes,2,opt,name=chiselCredentials,proto3" json:"chiselCredentials,omitempty"`
}

func (x *TeleportResponse) Reset() {
	*x = TeleportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kintokubecore_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeleportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeleportResponse) ProtoMessage() {}

func (x *TeleportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kintokubecore_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeleportResponse.ProtoReflect.Descriptor instead.
func (*TeleportResponse) Descriptor() ([]byte, []int) {
	return file_kintokubecore_proto_rawDescGZIP(), []int{20}
}

func (x *TeleportResponse) GetChiselHost() string {
	if x != nil {
		return x.ChiselHost
	}
	return ""
}

func (x *TeleportResponse) GetChiselCredentials() string {
	if x != nil {
		return x.ChiselCredentials
	}
	return ""
}

var File_kintokubecore_proto protoreflect.FileDescriptor

var file_kintokubecore_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6b, 0x69, 0x6e, 0x74, 0x6f, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x6b, 0x6b, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x17, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x72, 0x75, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x98, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e,
	0x76, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x52, 0x75, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x3d, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x47, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x15, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6e, 0x76, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e,
	0x76, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x4b, 0x69, 0x6c,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x14, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x17,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x4e, 0x41, 0x4d, 0x45,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x22, 0xaf, 0x01,
	0x0a, 0x1d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x4f, 0x4b, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x57, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x4e, 0x41, 0x4d, 0x45, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x2e, 0x0a, 0x12, 0x69, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22,
	0x6a, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x52, 0x4c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x18, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6e, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x10, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x73, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x73, 0x65, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x63, 0x68, 0x69, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x69, 0x73,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x32, 0xbb, 0x0d,
	0x0a, 0x14, 0x4b, 0x69, 0x6e, 0x74, 0x6f, 0x4b, 0x75, 0x62, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x12, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x12, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3c, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x13, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x4b, 0x69, 0x6c,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19,
	0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x05, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x19, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x19, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x35, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4a,
	0x6f, 0x62, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a,
	0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x12, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x10, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x18, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x4b, 0x69, 0x6e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x4b, 0x69,
	0x6e, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x55, 0x52, 0x4c, 0x12, 0x17, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x10, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x10, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x69, 0x6e, 0x74, 0x6f, 0x68,
	0x75, 0x62, 0x2f, 0x6b, 0x69, 0x6e, 0x74, 0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_kintokubecore_proto_rawDescOnce sync.Once
	file_kintokubecore_proto_rawDescData = file_kintokubecore_proto_rawDesc
)

func file_kintokubecore_proto_rawDescGZIP() []byte {
	file_kintokubecore_proto_rawDescOnce.Do(func() {
		file_kintokubecore_proto_rawDescData = protoimpl.X.CompressGZIP(file_kintokubecore_proto_rawDescData)
	})
	return file_kintokubecore_proto_rawDescData
}

var file_kintokubecore_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_kintokubecore_proto_goTypes = []interface{}{
	(*EnvironmentQueryRequest)(nil),       // 0: EnvironmentQueryRequest
	(*DeleteEnvironmentRequest)(nil),      // 1: DeleteEnvironmentRequest
	(*CreateBlockRequest)(nil),            // 2: CreateBlockRequest
	(*DeployBlockRequest)(nil),            // 3: DeployBlockRequest
	(*BlockQueryRequest)(nil),             // 4: BlockQueryRequest
	(*DeleteBlockRequest)(nil),            // 5: DeleteBlockRequest
	(*BlockUpdateResponse)(nil),           // 6: BlockUpdateResponse
	(*WatchBuildLogsRequest)(nil),         // 7: WatchBuildLogsRequest
	(*WatchConsoleLogsRequest)(nil),       // 8: WatchConsoleLogsRequest
	(*UpdateBuildStatusRequest)(nil),      // 9: UpdateBuildStatusRequest
	(*UpdateBuildStepRequest)(nil),        // 10: UpdateBuildStepRequest
	(*UpdateBuildStatusResponse)(nil),     // 11: UpdateBuildStatusResponse
	(*KillBlockInstanceRequest)(nil),      // 12: KillBlockInstanceRequest
	(*RollbackBlockRequest)(nil),          // 13: RollbackBlockRequest
	(*CustomDomainNameRequest)(nil),       // 14: CustomDomainNameRequest
	(*CheckCustomDomainNameResponse)(nil), // 15: CheckCustomDomainNameResponse
	(*EnablePublicURLRequest)(nil),        // 16: EnablePublicURLRequest
	(*DisablePublicURLRequest)(nil),       // 17: DisablePublicURLRequest
	(*AbortBlockReleaseRequest)(nil),      // 18: AbortBlockReleaseRequest
	(*TeleportRequest)(nil),               // 19: TeleportRequest
	(*TeleportResponse)(nil),              // 20: TeleportResponse
	(*RunConfig)(nil),                     // 21: RunConfig
	(*BuildConfig)(nil),                   // 22: BuildConfig
	(*BuildStatus)(nil),                   // 23: BuildStatus
	(*empty.Empty)(nil),                   // 24: google.protobuf.Empty
	(*Environment)(nil),                   // 25: Environment
	(*Blocks)(nil),                        // 26: Blocks
	(*Block)(nil),                         // 27: Block
	(*ReleasesStatus)(nil),                // 28: ReleasesStatus
	(*Logs)(nil),                          // 29: Logs
	(*BlockStatuses)(nil),                 // 30: BlockStatuses
	(*JobStatus)(nil),                     // 31: JobStatus
	(*BlocksMetrics)(nil),                 // 32: BlocksMetrics
	(*ConsoleLog)(nil),                    // 33: ConsoleLog
	(*KintoConfiguration)(nil),            // 34: KintoConfiguration
}
var file_kintokubecore_proto_depIdxs = []int32{
	21, // 0: CreateBlockRequest.runConfig:type_name -> RunConfig
	22, // 1: CreateBlockRequest.buildConfig:type_name -> BuildConfig
	21, // 2: DeployBlockRequest.runConfig:type_name -> RunConfig
	22, // 3: DeployBlockRequest.buildConfig:type_name -> BuildConfig
	23, // 4: UpdateBuildStatusRequest.status:type_name -> BuildStatus
	23, // 5: UpdateBuildStepRequest.status:type_name -> BuildStatus
	24, // 6: KintoKubeCoreService.CreateEnvironment:input_type -> google.protobuf.Empty
	0,  // 7: KintoKubeCoreService.GetEnvironment:input_type -> EnvironmentQueryRequest
	1,  // 8: KintoKubeCoreService.DeleteEnvironment:input_type -> DeleteEnvironmentRequest
	2,  // 9: KintoKubeCoreService.CreateBlock:input_type -> CreateBlockRequest
	3,  // 10: KintoKubeCoreService.DeployBlockUpdate:input_type -> DeployBlockRequest
	13, // 11: KintoKubeCoreService.RollbackBlock:input_type -> RollbackBlockRequest
	4,  // 12: KintoKubeCoreService.GetBlocks:input_type -> BlockQueryRequest
	4,  // 13: KintoKubeCoreService.GetBlock:input_type -> BlockQueryRequest
	5,  // 14: KintoKubeCoreService.DeleteBlock:input_type -> DeleteBlockRequest
	4,  // 15: KintoKubeCoreService.SuspendBlock:input_type -> BlockQueryRequest
	4,  // 16: KintoKubeCoreService.WatchReleasesStatus:input_type -> BlockQueryRequest
	12, // 17: KintoKubeCoreService.KillBlockInstance:input_type -> KillBlockInstanceRequest
	18, // 18: KintoKubeCoreService.AbortRelease:input_type -> AbortBlockReleaseRequest
	7,  // 19: KintoKubeCoreService.WatchBuildLogs:input_type -> WatchBuildLogsRequest
	9,  // 20: KintoKubeCoreService.UpdateBuildStatus:input_type -> UpdateBuildStatusRequest
	0,  // 21: KintoKubeCoreService.WatchBlocksHealthStatuses:input_type -> EnvironmentQueryRequest
	4,  // 22: KintoKubeCoreService.WatchJobsStatus:input_type -> BlockQueryRequest
	4,  // 23: KintoKubeCoreService.WatchBlocksMetrics:input_type -> BlockQueryRequest
	8,  // 24: KintoKubeCoreService.WatchConsoleLogs:input_type -> WatchConsoleLogsRequest
	24, // 25: KintoKubeCoreService.GetKintoConfiguration:input_type -> google.protobuf.Empty
	14, // 26: KintoKubeCoreService.CreateCustomDomainName:input_type -> CustomDomainNameRequest
	14, // 27: KintoKubeCoreService.DeleteCustomDomainName:input_type -> CustomDomainNameRequest
	14, // 28: KintoKubeCoreService.CheckCustomDomainName:input_type -> CustomDomainNameRequest
	16, // 29: KintoKubeCoreService.EnablePublicURL:input_type -> EnablePublicURLRequest
	17, // 30: KintoKubeCoreService.DisablePublicURL:input_type -> DisablePublicURLRequest
	19, // 31: KintoKubeCoreService.StartTeleport:input_type -> TeleportRequest
	25, // 32: KintoKubeCoreService.CreateEnvironment:output_type -> Environment
	25, // 33: KintoKubeCoreService.GetEnvironment:output_type -> Environment
	24, // 34: KintoKubeCoreService.DeleteEnvironment:output_type -> google.protobuf.Empty
	6,  // 35: KintoKubeCoreService.CreateBlock:output_type -> BlockUpdateResponse
	6,  // 36: KintoKubeCoreService.DeployBlockUpdate:output_type -> BlockUpdateResponse
	6,  // 37: KintoKubeCoreService.RollbackBlock:output_type -> BlockUpdateResponse
	26, // 38: KintoKubeCoreService.GetBlocks:output_type -> Blocks
	27, // 39: KintoKubeCoreService.GetBlock:output_type -> Block
	24, // 40: KintoKubeCoreService.DeleteBlock:output_type -> google.protobuf.Empty
	24, // 41: KintoKubeCoreService.SuspendBlock:output_type -> google.protobuf.Empty
	28, // 42: KintoKubeCoreService.WatchReleasesStatus:output_type -> ReleasesStatus
	24, // 43: KintoKubeCoreService.KillBlockInstance:output_type -> google.protobuf.Empty
	24, // 44: KintoKubeCoreService.AbortRelease:output_type -> google.protobuf.Empty
	29, // 45: KintoKubeCoreService.WatchBuildLogs:output_type -> Logs
	11, // 46: KintoKubeCoreService.UpdateBuildStatus:output_type -> UpdateBuildStatusResponse
	30, // 47: KintoKubeCoreService.WatchBlocksHealthStatuses:output_type -> BlockStatuses
	31, // 48: KintoKubeCoreService.WatchJobsStatus:output_type -> JobStatus
	32, // 49: KintoKubeCoreService.WatchBlocksMetrics:output_type -> BlocksMetrics
	33, // 50: KintoKubeCoreService.WatchConsoleLogs:output_type -> ConsoleLog
	34, // 51: KintoKubeCoreService.GetKintoConfiguration:output_type -> KintoConfiguration
	24, // 52: KintoKubeCoreService.CreateCustomDomainName:output_type -> google.protobuf.Empty
	24, // 53: KintoKubeCoreService.DeleteCustomDomainName:output_type -> google.protobuf.Empty
	15, // 54: KintoKubeCoreService.CheckCustomDomainName:output_type -> CheckCustomDomainNameResponse
	24, // 55: KintoKubeCoreService.EnablePublicURL:output_type -> google.protobuf.Empty
	24, // 56: KintoKubeCoreService.DisablePublicURL:output_type -> google.protobuf.Empty
	20, // 57: KintoKubeCoreService.StartTeleport:output_type -> TeleportResponse
	32, // [32:58] is the sub-list for method output_type
	6,  // [6:32] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_kintokubecore_proto_init() }
func file_kintokubecore_proto_init() {
	if File_kintokubecore_proto != nil {
		return
	}
	file_kkc_models_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kintokubecore_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchBuildLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchConsoleLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBuildStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBuildStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBuildStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillBlockInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollbackBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDomainNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCustomDomainNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnablePublicURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisablePublicURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortBlockReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeleportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kintokubecore_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeleportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kintokubecore_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kintokubecore_proto_goTypes,
		DependencyIndexes: file_kintokubecore_proto_depIdxs,
		MessageInfos:      file_kintokubecore_proto_msgTypes,
	}.Build()
	File_kintokubecore_proto = out.File
	file_kintokubecore_proto_rawDesc = nil
	file_kintokubecore_proto_goTypes = nil
	file_kintokubecore_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KintoKubeCoreServiceClient is the client API for KintoKubeCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KintoKubeCoreServiceClient interface {
	CreateEnvironment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Environment, error)
	GetEnvironment(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (*Environment, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	DeployBlockUpdate(ctx context.Context, in *DeployBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	RollbackBlock(ctx context.Context, in *RollbackBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	GetBlocks(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Blocks, error)
	GetBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Block, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SuspendBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	WatchReleasesStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchReleasesStatusClient, error)
	KillBlockInstance(ctx context.Context, in *KillBlockInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AbortRelease(ctx context.Context, in *AbortBlockReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	WatchBuildLogs(ctx context.Context, in *WatchBuildLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBuildLogsClient, error)
	UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest, opts ...grpc.CallOption) (*UpdateBuildStatusResponse, error)
	WatchBlocksHealthStatuses(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksHealthStatusesClient, error)
	WatchJobsStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchJobsStatusClient, error)
	WatchBlocksMetrics(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksMetricsClient, error)
	WatchConsoleLogs(ctx context.Context, in *WatchConsoleLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchConsoleLogsClient, error)
	GetKintoConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KintoConfiguration, error)
	CreateCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*CheckCustomDomainNameResponse, error)
	EnablePublicURL(ctx context.Context, in *EnablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DisablePublicURL(ctx context.Context, in *DisablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartTeleport(ctx context.Context, in *TeleportRequest, opts ...grpc.CallOption) (KintoKubeCoreService_StartTeleportClient, error)
}

type kintoKubeCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKintoKubeCoreServiceClient(cc grpc.ClientConnInterface) KintoKubeCoreServiceClient {
	return &kintoKubeCoreServiceClient{cc}
}

func (c *kintoKubeCoreServiceClient) CreateEnvironment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) GetEnvironment(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CreateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeployBlockUpdate(ctx context.Context, in *DeployBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeployBlockUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) RollbackBlock(ctx context.Context, in *RollbackBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/RollbackBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) GetBlocks(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Blocks, error) {
	out := new(Blocks)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) GetBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeleteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) SuspendBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/SuspendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) WatchReleasesStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchReleasesStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[0], "/KintoKubeCoreService/WatchReleasesStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchReleasesStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchReleasesStatusClient interface {
	Recv() (*ReleasesStatus, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchReleasesStatusClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchReleasesStatusClient) Recv() (*ReleasesStatus, error) {
	m := new(ReleasesStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) KillBlockInstance(ctx context.Context, in *KillBlockInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/KillBlockInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) AbortRelease(ctx context.Context, in *AbortBlockReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/AbortRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) WatchBuildLogs(ctx context.Context, in *WatchBuildLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBuildLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[1], "/KintoKubeCoreService/WatchBuildLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchBuildLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchBuildLogsClient interface {
	Recv() (*Logs, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchBuildLogsClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchBuildLogsClient) Recv() (*Logs, error) {
	m := new(Logs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest, opts ...grpc.CallOption) (*UpdateBuildStatusResponse, error) {
	out := new(UpdateBuildStatusResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/UpdateBuildStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) WatchBlocksHealthStatuses(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksHealthStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[2], "/KintoKubeCoreService/WatchBlocksHealthStatuses", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchBlocksHealthStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchBlocksHealthStatusesClient interface {
	Recv() (*BlockStatuses, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchBlocksHealthStatusesClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchBlocksHealthStatusesClient) Recv() (*BlockStatuses, error) {
	m := new(BlockStatuses)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) WatchJobsStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchJobsStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[3], "/KintoKubeCoreService/WatchJobsStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchJobsStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchJobsStatusClient interface {
	Recv() (*JobStatus, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchJobsStatusClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchJobsStatusClient) Recv() (*JobStatus, error) {
	m := new(JobStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) WatchBlocksMetrics(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[4], "/KintoKubeCoreService/WatchBlocksMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchBlocksMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchBlocksMetricsClient interface {
	Recv() (*BlocksMetrics, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchBlocksMetricsClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchBlocksMetricsClient) Recv() (*BlocksMetrics, error) {
	m := new(BlocksMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) WatchConsoleLogs(ctx context.Context, in *WatchConsoleLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchConsoleLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[5], "/KintoKubeCoreService/WatchConsoleLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchConsoleLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchConsoleLogsClient interface {
	Recv() (*ConsoleLog, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchConsoleLogsClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchConsoleLogsClient) Recv() (*ConsoleLog, error) {
	m := new(ConsoleLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) GetKintoConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KintoConfiguration, error) {
	out := new(KintoConfiguration)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetKintoConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) CreateCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CreateCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeleteCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeleteCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) CheckCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*CheckCustomDomainNameResponse, error) {
	out := new(CheckCustomDomainNameResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CheckCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) EnablePublicURL(ctx context.Context, in *EnablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/EnablePublicURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DisablePublicURL(ctx context.Context, in *DisablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DisablePublicURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) StartTeleport(ctx context.Context, in *TeleportRequest, opts ...grpc.CallOption) (KintoKubeCoreService_StartTeleportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[6], "/KintoKubeCoreService/StartTeleport", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceStartTeleportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_StartTeleportClient interface {
	Recv() (*TeleportResponse, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceStartTeleportClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceStartTeleportClient) Recv() (*TeleportResponse, error) {
	m := new(TeleportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KintoKubeCoreServiceServer is the server API for KintoKubeCoreService service.
type KintoKubeCoreServiceServer interface {
	CreateEnvironment(context.Context, *empty.Empty) (*Environment, error)
	GetEnvironment(context.Context, *EnvironmentQueryRequest) (*Environment, error)
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*empty.Empty, error)
	CreateBlock(context.Context, *CreateBlockRequest) (*BlockUpdateResponse, error)
	DeployBlockUpdate(context.Context, *DeployBlockRequest) (*BlockUpdateResponse, error)
	RollbackBlock(context.Context, *RollbackBlockRequest) (*BlockUpdateResponse, error)
	GetBlocks(context.Context, *BlockQueryRequest) (*Blocks, error)
	GetBlock(context.Context, *BlockQueryRequest) (*Block, error)
	DeleteBlock(context.Context, *DeleteBlockRequest) (*empty.Empty, error)
	SuspendBlock(context.Context, *BlockQueryRequest) (*empty.Empty, error)
	WatchReleasesStatus(*BlockQueryRequest, KintoKubeCoreService_WatchReleasesStatusServer) error
	KillBlockInstance(context.Context, *KillBlockInstanceRequest) (*empty.Empty, error)
	AbortRelease(context.Context, *AbortBlockReleaseRequest) (*empty.Empty, error)
	WatchBuildLogs(*WatchBuildLogsRequest, KintoKubeCoreService_WatchBuildLogsServer) error
	UpdateBuildStatus(context.Context, *UpdateBuildStatusRequest) (*UpdateBuildStatusResponse, error)
	WatchBlocksHealthStatuses(*EnvironmentQueryRequest, KintoKubeCoreService_WatchBlocksHealthStatusesServer) error
	WatchJobsStatus(*BlockQueryRequest, KintoKubeCoreService_WatchJobsStatusServer) error
	WatchBlocksMetrics(*BlockQueryRequest, KintoKubeCoreService_WatchBlocksMetricsServer) error
	WatchConsoleLogs(*WatchConsoleLogsRequest, KintoKubeCoreService_WatchConsoleLogsServer) error
	GetKintoConfiguration(context.Context, *empty.Empty) (*KintoConfiguration, error)
	CreateCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error)
	DeleteCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error)
	CheckCustomDomainName(context.Context, *CustomDomainNameRequest) (*CheckCustomDomainNameResponse, error)
	EnablePublicURL(context.Context, *EnablePublicURLRequest) (*empty.Empty, error)
	DisablePublicURL(context.Context, *DisablePublicURLRequest) (*empty.Empty, error)
	StartTeleport(*TeleportRequest, KintoKubeCoreService_StartTeleportServer) error
}

// UnimplementedKintoKubeCoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKintoKubeCoreServiceServer struct {
}

func (*UnimplementedKintoKubeCoreServiceServer) CreateEnvironment(context.Context, *empty.Empty) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetEnvironment(context.Context, *EnvironmentQueryRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) CreateBlock(context.Context, *CreateBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeployBlockUpdate(context.Context, *DeployBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployBlockUpdate not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) RollbackBlock(context.Context, *RollbackBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetBlocks(context.Context, *BlockQueryRequest) (*Blocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetBlock(context.Context, *BlockQueryRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeleteBlock(context.Context, *DeleteBlockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) SuspendBlock(context.Context, *BlockQueryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchReleasesStatus(*BlockQueryRequest, KintoKubeCoreService_WatchReleasesStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchReleasesStatus not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) KillBlockInstance(context.Context, *KillBlockInstanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillBlockInstance not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) AbortRelease(context.Context, *AbortBlockReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortRelease not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchBuildLogs(*WatchBuildLogsRequest, KintoKubeCoreService_WatchBuildLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBuildLogs not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) UpdateBuildStatus(context.Context, *UpdateBuildStatusRequest) (*UpdateBuildStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuildStatus not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchBlocksHealthStatuses(*EnvironmentQueryRequest, KintoKubeCoreService_WatchBlocksHealthStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocksHealthStatuses not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchJobsStatus(*BlockQueryRequest, KintoKubeCoreService_WatchJobsStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchJobsStatus not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchBlocksMetrics(*BlockQueryRequest, KintoKubeCoreService_WatchBlocksMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocksMetrics not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchConsoleLogs(*WatchConsoleLogsRequest, KintoKubeCoreService_WatchConsoleLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConsoleLogs not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetKintoConfiguration(context.Context, *empty.Empty) (*KintoConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKintoConfiguration not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) CreateCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomDomainName not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeleteCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomDomainName not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) CheckCustomDomainName(context.Context, *CustomDomainNameRequest) (*CheckCustomDomainNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomDomainName not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) EnablePublicURL(context.Context, *EnablePublicURLRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePublicURL not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DisablePublicURL(context.Context, *DisablePublicURLRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePublicURL not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) StartTeleport(*TeleportRequest, KintoKubeCoreService_StartTeleportServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTeleport not implemented")
}

func RegisterKintoKubeCoreServiceServer(s *grpc.Server, srv KintoKubeCoreServiceServer) {
	s.RegisterService(&_KintoKubeCoreService_serviceDesc, srv)
}

func _KintoKubeCoreService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CreateEnvironment(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetEnvironment(ctx, req.(*EnvironmentQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CreateBlock(ctx, req.(*CreateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeployBlockUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeployBlockUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeployBlockUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeployBlockUpdate(ctx, req.(*DeployBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_RollbackBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).RollbackBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/RollbackBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).RollbackBlock(ctx, req.(*RollbackBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetBlocks(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetBlock(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_SuspendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).SuspendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/SuspendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).SuspendBlock(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_WatchReleasesStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchReleasesStatus(m, &kintoKubeCoreServiceWatchReleasesStatusServer{stream})
}

type KintoKubeCoreService_WatchReleasesStatusServer interface {
	Send(*ReleasesStatus) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchReleasesStatusServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchReleasesStatusServer) Send(m *ReleasesStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_KillBlockInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillBlockInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).KillBlockInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/KillBlockInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).KillBlockInstance(ctx, req.(*KillBlockInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_AbortRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortBlockReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).AbortRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/AbortRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).AbortRelease(ctx, req.(*AbortBlockReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_WatchBuildLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBuildLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchBuildLogs(m, &kintoKubeCoreServiceWatchBuildLogsServer{stream})
}

type KintoKubeCoreService_WatchBuildLogsServer interface {
	Send(*Logs) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchBuildLogsServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchBuildLogsServer) Send(m *Logs) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_UpdateBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).UpdateBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/UpdateBuildStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).UpdateBuildStatus(ctx, req.(*UpdateBuildStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_WatchBlocksHealthStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnvironmentQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchBlocksHealthStatuses(m, &kintoKubeCoreServiceWatchBlocksHealthStatusesServer{stream})
}

type KintoKubeCoreService_WatchBlocksHealthStatusesServer interface {
	Send(*BlockStatuses) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchBlocksHealthStatusesServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchBlocksHealthStatusesServer) Send(m *BlockStatuses) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_WatchJobsStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchJobsStatus(m, &kintoKubeCoreServiceWatchJobsStatusServer{stream})
}

type KintoKubeCoreService_WatchJobsStatusServer interface {
	Send(*JobStatus) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchJobsStatusServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchJobsStatusServer) Send(m *JobStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_WatchBlocksMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchBlocksMetrics(m, &kintoKubeCoreServiceWatchBlocksMetricsServer{stream})
}

type KintoKubeCoreService_WatchBlocksMetricsServer interface {
	Send(*BlocksMetrics) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchBlocksMetricsServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchBlocksMetricsServer) Send(m *BlocksMetrics) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_WatchConsoleLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConsoleLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchConsoleLogs(m, &kintoKubeCoreServiceWatchConsoleLogsServer{stream})
}

type KintoKubeCoreService_WatchConsoleLogsServer interface {
	Send(*ConsoleLog) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchConsoleLogsServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchConsoleLogsServer) Send(m *ConsoleLog) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_GetKintoConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetKintoConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetKintoConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetKintoConfiguration(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_CreateCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CreateCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CreateCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CreateCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeleteCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeleteCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeleteCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeleteCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_CheckCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CheckCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CheckCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CheckCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_EnablePublicURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePublicURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).EnablePublicURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/EnablePublicURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).EnablePublicURL(ctx, req.(*EnablePublicURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DisablePublicURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePublicURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DisablePublicURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DisablePublicURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DisablePublicURL(ctx, req.(*DisablePublicURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_StartTeleport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TeleportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).StartTeleport(m, &kintoKubeCoreServiceStartTeleportServer{stream})
}

type KintoKubeCoreService_StartTeleportServer interface {
	Send(*TeleportResponse) error
	grpc.ServerStream
}

type kintoKubeCoreServiceStartTeleportServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceStartTeleportServer) Send(m *TeleportResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _KintoKubeCoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KintoKubeCoreService",
	HandlerType: (*KintoKubeCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnvironment",
			Handler:    _KintoKubeCoreService_CreateEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _KintoKubeCoreService_GetEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _KintoKubeCoreService_DeleteEnvironment_Handler,
		},
		{
			MethodName: "CreateBlock",
			Handler:    _KintoKubeCoreService_CreateBlock_Handler,
		},
		{
			MethodName: "DeployBlockUpdate",
			Handler:    _KintoKubeCoreService_DeployBlockUpdate_Handler,
		},
		{
			MethodName: "RollbackBlock",
			Handler:    _KintoKubeCoreService_RollbackBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _KintoKubeCoreService_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _KintoKubeCoreService_GetBlock_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _KintoKubeCoreService_DeleteBlock_Handler,
		},
		{
			MethodName: "SuspendBlock",
			Handler:    _KintoKubeCoreService_SuspendBlock_Handler,
		},
		{
			MethodName: "KillBlockInstance",
			Handler:    _KintoKubeCoreService_KillBlockInstance_Handler,
		},
		{
			MethodName: "AbortRelease",
			Handler:    _KintoKubeCoreService_AbortRelease_Handler,
		},
		{
			MethodName: "UpdateBuildStatus",
			Handler:    _KintoKubeCoreService_UpdateBuildStatus_Handler,
		},
		{
			MethodName: "GetKintoConfiguration",
			Handler:    _KintoKubeCoreService_GetKintoConfiguration_Handler,
		},
		{
			MethodName: "CreateCustomDomainName",
			Handler:    _KintoKubeCoreService_CreateCustomDomainName_Handler,
		},
		{
			MethodName: "DeleteCustomDomainName",
			Handler:    _KintoKubeCoreService_DeleteCustomDomainName_Handler,
		},
		{
			MethodName: "CheckCustomDomainName",
			Handler:    _KintoKubeCoreService_CheckCustomDomainName_Handler,
		},
		{
			MethodName: "EnablePublicURL",
			Handler:    _KintoKubeCoreService_EnablePublicURL_Handler,
		},
		{
			MethodName: "DisablePublicURL",
			Handler:    _KintoKubeCoreService_DisablePublicURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchReleasesStatus",
			Handler:       _KintoKubeCoreService_WatchReleasesStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBuildLogs",
			Handler:       _KintoKubeCoreService_WatchBuildLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocksHealthStatuses",
			Handler:       _KintoKubeCoreService_WatchBlocksHealthStatuses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchJobsStatus",
			Handler:       _KintoKubeCoreService_WatchJobsStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocksMetrics",
			Handler:       _KintoKubeCoreService_WatchBlocksMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchConsoleLogs",
			Handler:       _KintoKubeCoreService_WatchConsoleLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartTeleport",
			Handler:       _KintoKubeCoreService_StartTeleport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kintokubecore.proto",
}
