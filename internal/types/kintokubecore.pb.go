// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kintokubecore.proto

package types

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnvironmentQueryRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvironmentQueryRequest) Reset()         { *m = EnvironmentQueryRequest{} }
func (m *EnvironmentQueryRequest) String() string { return proto.CompactTextString(m) }
func (*EnvironmentQueryRequest) ProtoMessage()    {}
func (*EnvironmentQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{0}
}

func (m *EnvironmentQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvironmentQueryRequest.Unmarshal(m, b)
}
func (m *EnvironmentQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvironmentQueryRequest.Marshal(b, m, deterministic)
}
func (m *EnvironmentQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvironmentQueryRequest.Merge(m, src)
}
func (m *EnvironmentQueryRequest) XXX_Size() int {
	return xxx_messageInfo_EnvironmentQueryRequest.Size(m)
}
func (m *EnvironmentQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvironmentQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnvironmentQueryRequest proto.InternalMessageInfo

func (m *EnvironmentQueryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteEnvironmentRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteEnvironmentRequest) Reset()         { *m = DeleteEnvironmentRequest{} }
func (m *DeleteEnvironmentRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEnvironmentRequest) ProtoMessage()    {}
func (*DeleteEnvironmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{1}
}

func (m *DeleteEnvironmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteEnvironmentRequest.Unmarshal(m, b)
}
func (m *DeleteEnvironmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteEnvironmentRequest.Marshal(b, m, deterministic)
}
func (m *DeleteEnvironmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEnvironmentRequest.Merge(m, src)
}
func (m *DeleteEnvironmentRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteEnvironmentRequest.Size(m)
}
func (m *DeleteEnvironmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEnvironmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEnvironmentRequest proto.InternalMessageInfo

func (m *DeleteEnvironmentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CreateBlockRequest struct {
	EnvId                string       `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunConfig            *RunConfig   `protobuf:"bytes,3,opt,name=runConfig,proto3" json:"runConfig,omitempty"`
	BuildConfig          *BuildConfig `protobuf:"bytes,4,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateBlockRequest) Reset()         { *m = CreateBlockRequest{} }
func (m *CreateBlockRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBlockRequest) ProtoMessage()    {}
func (*CreateBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{2}
}

func (m *CreateBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBlockRequest.Unmarshal(m, b)
}
func (m *CreateBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBlockRequest.Marshal(b, m, deterministic)
}
func (m *CreateBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBlockRequest.Merge(m, src)
}
func (m *CreateBlockRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBlockRequest.Size(m)
}
func (m *CreateBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBlockRequest proto.InternalMessageInfo

func (m *CreateBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *CreateBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBlockRequest) GetRunConfig() *RunConfig {
	if m != nil {
		return m.RunConfig
	}
	return nil
}

func (m *CreateBlockRequest) GetBuildConfig() *BuildConfig {
	if m != nil {
		return m.BuildConfig
	}
	return nil
}

type DeployBlockRequest struct {
	EnvId                string       `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RunConfig            *RunConfig   `protobuf:"bytes,3,opt,name=runConfig,proto3" json:"runConfig,omitempty"`
	BuildConfig          *BuildConfig `protobuf:"bytes,4,opt,name=buildConfig,proto3" json:"buildConfig,omitempty"`
	BaseReleaseId        string       `protobuf:"bytes,5,opt,name=baseReleaseId,proto3" json:"baseReleaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeployBlockRequest) Reset()         { *m = DeployBlockRequest{} }
func (m *DeployBlockRequest) String() string { return proto.CompactTextString(m) }
func (*DeployBlockRequest) ProtoMessage()    {}
func (*DeployBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{3}
}

func (m *DeployBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeployBlockRequest.Unmarshal(m, b)
}
func (m *DeployBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeployBlockRequest.Marshal(b, m, deterministic)
}
func (m *DeployBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployBlockRequest.Merge(m, src)
}
func (m *DeployBlockRequest) XXX_Size() int {
	return xxx_messageInfo_DeployBlockRequest.Size(m)
}
func (m *DeployBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeployBlockRequest proto.InternalMessageInfo

func (m *DeployBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *DeployBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployBlockRequest) GetRunConfig() *RunConfig {
	if m != nil {
		return m.RunConfig
	}
	return nil
}

func (m *DeployBlockRequest) GetBuildConfig() *BuildConfig {
	if m != nil {
		return m.BuildConfig
	}
	return nil
}

func (m *DeployBlockRequest) GetBaseReleaseId() string {
	if m != nil {
		return m.BaseReleaseId
	}
	return ""
}

type SuspendBlockRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SuspendBlockRequest) Reset()         { *m = SuspendBlockRequest{} }
func (m *SuspendBlockRequest) String() string { return proto.CompactTextString(m) }
func (*SuspendBlockRequest) ProtoMessage()    {}
func (*SuspendBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{4}
}

func (m *SuspendBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SuspendBlockRequest.Unmarshal(m, b)
}
func (m *SuspendBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SuspendBlockRequest.Marshal(b, m, deterministic)
}
func (m *SuspendBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspendBlockRequest.Merge(m, src)
}
func (m *SuspendBlockRequest) XXX_Size() int {
	return xxx_messageInfo_SuspendBlockRequest.Size(m)
}
func (m *SuspendBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspendBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuspendBlockRequest proto.InternalMessageInfo

func (m *SuspendBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *SuspendBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlockQueryRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockQueryRequest) Reset()         { *m = BlockQueryRequest{} }
func (m *BlockQueryRequest) String() string { return proto.CompactTextString(m) }
func (*BlockQueryRequest) ProtoMessage()    {}
func (*BlockQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{5}
}

func (m *BlockQueryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockQueryRequest.Unmarshal(m, b)
}
func (m *BlockQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockQueryRequest.Marshal(b, m, deterministic)
}
func (m *BlockQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockQueryRequest.Merge(m, src)
}
func (m *BlockQueryRequest) XXX_Size() int {
	return xxx_messageInfo_BlockQueryRequest.Size(m)
}
func (m *BlockQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockQueryRequest proto.InternalMessageInfo

func (m *BlockQueryRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *BlockQueryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteBlockRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBlockRequest) Reset()         { *m = DeleteBlockRequest{} }
func (m *DeleteBlockRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBlockRequest) ProtoMessage()    {}
func (*DeleteBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{6}
}

func (m *DeleteBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBlockRequest.Unmarshal(m, b)
}
func (m *DeleteBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBlockRequest.Marshal(b, m, deterministic)
}
func (m *DeleteBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBlockRequest.Merge(m, src)
}
func (m *DeleteBlockRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBlockRequest.Size(m)
}
func (m *DeleteBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBlockRequest proto.InternalMessageInfo

func (m *DeleteBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *DeleteBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlockUpdateResponse struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReleaseId            string   `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockUpdateResponse) Reset()         { *m = BlockUpdateResponse{} }
func (m *BlockUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*BlockUpdateResponse) ProtoMessage()    {}
func (*BlockUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{7}
}

func (m *BlockUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockUpdateResponse.Unmarshal(m, b)
}
func (m *BlockUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockUpdateResponse.Marshal(b, m, deterministic)
}
func (m *BlockUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockUpdateResponse.Merge(m, src)
}
func (m *BlockUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_BlockUpdateResponse.Size(m)
}
func (m *BlockUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockUpdateResponse proto.InternalMessageInfo

func (m *BlockUpdateResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlockUpdateResponse) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type WatchBuildLogsRequest struct {
	ReleaseId            string   `protobuf:"bytes,1,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	BlockName            string   `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBuildLogsRequest) Reset()         { *m = WatchBuildLogsRequest{} }
func (m *WatchBuildLogsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchBuildLogsRequest) ProtoMessage()    {}
func (*WatchBuildLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{8}
}

func (m *WatchBuildLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBuildLogsRequest.Unmarshal(m, b)
}
func (m *WatchBuildLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBuildLogsRequest.Marshal(b, m, deterministic)
}
func (m *WatchBuildLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBuildLogsRequest.Merge(m, src)
}
func (m *WatchBuildLogsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchBuildLogsRequest.Size(m)
}
func (m *WatchBuildLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBuildLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBuildLogsRequest proto.InternalMessageInfo

func (m *WatchBuildLogsRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *WatchBuildLogsRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *WatchBuildLogsRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type WatchConsoleLogsRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchConsoleLogsRequest) Reset()         { *m = WatchConsoleLogsRequest{} }
func (m *WatchConsoleLogsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchConsoleLogsRequest) ProtoMessage()    {}
func (*WatchConsoleLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{9}
}

func (m *WatchConsoleLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchConsoleLogsRequest.Unmarshal(m, b)
}
func (m *WatchConsoleLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchConsoleLogsRequest.Marshal(b, m, deterministic)
}
func (m *WatchConsoleLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchConsoleLogsRequest.Merge(m, src)
}
func (m *WatchConsoleLogsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchConsoleLogsRequest.Size(m)
}
func (m *WatchConsoleLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchConsoleLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchConsoleLogsRequest proto.InternalMessageInfo

func (m *WatchConsoleLogsRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *WatchConsoleLogsRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type UpdateBuildStatusRequest struct {
	BlockName            string       `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string       `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId            string       `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	Status               *BuildStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateBuildStatusRequest) Reset()         { *m = UpdateBuildStatusRequest{} }
func (m *UpdateBuildStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildStatusRequest) ProtoMessage()    {}
func (*UpdateBuildStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{10}
}

func (m *UpdateBuildStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildStatusRequest.Unmarshal(m, b)
}
func (m *UpdateBuildStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildStatusRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBuildStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildStatusRequest.Merge(m, src)
}
func (m *UpdateBuildStatusRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildStatusRequest.Size(m)
}
func (m *UpdateBuildStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildStatusRequest proto.InternalMessageInfo

func (m *UpdateBuildStatusRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *UpdateBuildStatusRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *UpdateBuildStatusRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *UpdateBuildStatusRequest) GetStatus() *BuildStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UpdateBuildStepRequest struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status               *BuildStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateBuildStepRequest) Reset()         { *m = UpdateBuildStepRequest{} }
func (m *UpdateBuildStepRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildStepRequest) ProtoMessage()    {}
func (*UpdateBuildStepRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{11}
}

func (m *UpdateBuildStepRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildStepRequest.Unmarshal(m, b)
}
func (m *UpdateBuildStepRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildStepRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBuildStepRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildStepRequest.Merge(m, src)
}
func (m *UpdateBuildStepRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildStepRequest.Size(m)
}
func (m *UpdateBuildStepRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildStepRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildStepRequest proto.InternalMessageInfo

func (m *UpdateBuildStepRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateBuildStepRequest) GetStatus() *BuildStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type UpdateBuildStatusResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBuildStatusResponse) Reset()         { *m = UpdateBuildStatusResponse{} }
func (m *UpdateBuildStatusResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBuildStatusResponse) ProtoMessage()    {}
func (*UpdateBuildStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{12}
}

func (m *UpdateBuildStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuildStatusResponse.Unmarshal(m, b)
}
func (m *UpdateBuildStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuildStatusResponse.Marshal(b, m, deterministic)
}
func (m *UpdateBuildStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuildStatusResponse.Merge(m, src)
}
func (m *UpdateBuildStatusResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateBuildStatusResponse.Size(m)
}
func (m *UpdateBuildStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuildStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuildStatusResponse proto.InternalMessageInfo

func (m *UpdateBuildStatusResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type KillBlockInstanceRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KillBlockInstanceRequest) Reset()         { *m = KillBlockInstanceRequest{} }
func (m *KillBlockInstanceRequest) String() string { return proto.CompactTextString(m) }
func (*KillBlockInstanceRequest) ProtoMessage()    {}
func (*KillBlockInstanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{13}
}

func (m *KillBlockInstanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KillBlockInstanceRequest.Unmarshal(m, b)
}
func (m *KillBlockInstanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KillBlockInstanceRequest.Marshal(b, m, deterministic)
}
func (m *KillBlockInstanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillBlockInstanceRequest.Merge(m, src)
}
func (m *KillBlockInstanceRequest) XXX_Size() int {
	return xxx_messageInfo_KillBlockInstanceRequest.Size(m)
}
func (m *KillBlockInstanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KillBlockInstanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KillBlockInstanceRequest proto.InternalMessageInfo

func (m *KillBlockInstanceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KillBlockInstanceRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type RollbackBlockRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId            string   `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RollbackBlockRequest) Reset()         { *m = RollbackBlockRequest{} }
func (m *RollbackBlockRequest) String() string { return proto.CompactTextString(m) }
func (*RollbackBlockRequest) ProtoMessage()    {}
func (*RollbackBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{14}
}

func (m *RollbackBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RollbackBlockRequest.Unmarshal(m, b)
}
func (m *RollbackBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RollbackBlockRequest.Marshal(b, m, deterministic)
}
func (m *RollbackBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RollbackBlockRequest.Merge(m, src)
}
func (m *RollbackBlockRequest) XXX_Size() int {
	return xxx_messageInfo_RollbackBlockRequest.Size(m)
}
func (m *RollbackBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RollbackBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RollbackBlockRequest proto.InternalMessageInfo

func (m *RollbackBlockRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RollbackBlockRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *RollbackBlockRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type CustomDomainNameRequest struct {
	EnvId                string             `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockName            string             `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	CustomDomainName     string             `protobuf:"bytes,3,opt,name=customDomainName,proto3" json:"customDomainName,omitempty"`
	CNAME                string             `protobuf:"bytes,4,opt,name=CNAME,proto3" json:"CNAME,omitempty"`
	Protocol             RunConfig_Protocol `protobuf:"varint,5,opt,name=protocol,proto3,enum=RunConfig_Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CustomDomainNameRequest) Reset()         { *m = CustomDomainNameRequest{} }
func (m *CustomDomainNameRequest) String() string { return proto.CompactTextString(m) }
func (*CustomDomainNameRequest) ProtoMessage()    {}
func (*CustomDomainNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{15}
}

func (m *CustomDomainNameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomDomainNameRequest.Unmarshal(m, b)
}
func (m *CustomDomainNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomDomainNameRequest.Marshal(b, m, deterministic)
}
func (m *CustomDomainNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomDomainNameRequest.Merge(m, src)
}
func (m *CustomDomainNameRequest) XXX_Size() int {
	return xxx_messageInfo_CustomDomainNameRequest.Size(m)
}
func (m *CustomDomainNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomDomainNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomDomainNameRequest proto.InternalMessageInfo

func (m *CustomDomainNameRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *CustomDomainNameRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *CustomDomainNameRequest) GetCustomDomainName() string {
	if m != nil {
		return m.CustomDomainName
	}
	return ""
}

func (m *CustomDomainNameRequest) GetCNAME() string {
	if m != nil {
		return m.CNAME
	}
	return ""
}

func (m *CustomDomainNameRequest) GetProtocol() RunConfig_Protocol {
	if m != nil {
		return m.Protocol
	}
	return RunConfig_NOT_SET
}

type CheckCustomDomainNameResponse struct {
	IsCNAMEOK            bool     `protobuf:"varint,1,opt,name=isCNAMEOK,proto3" json:"isCNAMEOK,omitempty"`
	CNAMEWanted          string   `protobuf:"bytes,2,opt,name=CNAMEWanted,proto3" json:"CNAMEWanted,omitempty"`
	CNAMEFound           string   `protobuf:"bytes,3,opt,name=CNAMEFound,proto3" json:"CNAMEFound,omitempty"`
	IsCertificateReady   bool     `protobuf:"varint,4,opt,name=isCertificateReady,proto3" json:"isCertificateReady,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCustomDomainNameResponse) Reset()         { *m = CheckCustomDomainNameResponse{} }
func (m *CheckCustomDomainNameResponse) String() string { return proto.CompactTextString(m) }
func (*CheckCustomDomainNameResponse) ProtoMessage()    {}
func (*CheckCustomDomainNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{16}
}

func (m *CheckCustomDomainNameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCustomDomainNameResponse.Unmarshal(m, b)
}
func (m *CheckCustomDomainNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCustomDomainNameResponse.Marshal(b, m, deterministic)
}
func (m *CheckCustomDomainNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCustomDomainNameResponse.Merge(m, src)
}
func (m *CheckCustomDomainNameResponse) XXX_Size() int {
	return xxx_messageInfo_CheckCustomDomainNameResponse.Size(m)
}
func (m *CheckCustomDomainNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCustomDomainNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCustomDomainNameResponse proto.InternalMessageInfo

func (m *CheckCustomDomainNameResponse) GetIsCNAMEOK() bool {
	if m != nil {
		return m.IsCNAMEOK
	}
	return false
}

func (m *CheckCustomDomainNameResponse) GetCNAMEWanted() string {
	if m != nil {
		return m.CNAMEWanted
	}
	return ""
}

func (m *CheckCustomDomainNameResponse) GetCNAMEFound() string {
	if m != nil {
		return m.CNAMEFound
	}
	return ""
}

func (m *CheckCustomDomainNameResponse) GetIsCertificateReady() bool {
	if m != nil {
		return m.IsCertificateReady
	}
	return false
}

type EnablePublicURLRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	ReleaseId            string   `protobuf:"bytes,3,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnablePublicURLRequest) Reset()         { *m = EnablePublicURLRequest{} }
func (m *EnablePublicURLRequest) String() string { return proto.CompactTextString(m) }
func (*EnablePublicURLRequest) ProtoMessage()    {}
func (*EnablePublicURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{17}
}

func (m *EnablePublicURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnablePublicURLRequest.Unmarshal(m, b)
}
func (m *EnablePublicURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnablePublicURLRequest.Marshal(b, m, deterministic)
}
func (m *EnablePublicURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnablePublicURLRequest.Merge(m, src)
}
func (m *EnablePublicURLRequest) XXX_Size() int {
	return xxx_messageInfo_EnablePublicURLRequest.Size(m)
}
func (m *EnablePublicURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnablePublicURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnablePublicURLRequest proto.InternalMessageInfo

func (m *EnablePublicURLRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *EnablePublicURLRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *EnablePublicURLRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

type DisablePublicURLRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	EnvId                string   `protobuf:"bytes,2,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisablePublicURLRequest) Reset()         { *m = DisablePublicURLRequest{} }
func (m *DisablePublicURLRequest) String() string { return proto.CompactTextString(m) }
func (*DisablePublicURLRequest) ProtoMessage()    {}
func (*DisablePublicURLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{18}
}

func (m *DisablePublicURLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisablePublicURLRequest.Unmarshal(m, b)
}
func (m *DisablePublicURLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisablePublicURLRequest.Marshal(b, m, deterministic)
}
func (m *DisablePublicURLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisablePublicURLRequest.Merge(m, src)
}
func (m *DisablePublicURLRequest) XXX_Size() int {
	return xxx_messageInfo_DisablePublicURLRequest.Size(m)
}
func (m *DisablePublicURLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisablePublicURLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisablePublicURLRequest proto.InternalMessageInfo

func (m *DisablePublicURLRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *DisablePublicURLRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type AbortBlockReleaseRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId            string   `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	EnvId                string   `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AbortBlockReleaseRequest) Reset()         { *m = AbortBlockReleaseRequest{} }
func (m *AbortBlockReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*AbortBlockReleaseRequest) ProtoMessage()    {}
func (*AbortBlockReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{19}
}

func (m *AbortBlockReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AbortBlockReleaseRequest.Unmarshal(m, b)
}
func (m *AbortBlockReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AbortBlockReleaseRequest.Marshal(b, m, deterministic)
}
func (m *AbortBlockReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AbortBlockReleaseRequest.Merge(m, src)
}
func (m *AbortBlockReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_AbortBlockReleaseRequest.Size(m)
}
func (m *AbortBlockReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AbortBlockReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AbortBlockReleaseRequest proto.InternalMessageInfo

func (m *AbortBlockReleaseRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *AbortBlockReleaseRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *AbortBlockReleaseRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

type TeleportRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockName            string   `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeleportRequest) Reset()         { *m = TeleportRequest{} }
func (m *TeleportRequest) String() string { return proto.CompactTextString(m) }
func (*TeleportRequest) ProtoMessage()    {}
func (*TeleportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{20}
}

func (m *TeleportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeleportRequest.Unmarshal(m, b)
}
func (m *TeleportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeleportRequest.Marshal(b, m, deterministic)
}
func (m *TeleportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeleportRequest.Merge(m, src)
}
func (m *TeleportRequest) XXX_Size() int {
	return xxx_messageInfo_TeleportRequest.Size(m)
}
func (m *TeleportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeleportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeleportRequest proto.InternalMessageInfo

func (m *TeleportRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *TeleportRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

type TeleportResponse struct {
	Data                 *TeleportServiceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TeleportResponse) Reset()         { *m = TeleportResponse{} }
func (m *TeleportResponse) String() string { return proto.CompactTextString(m) }
func (*TeleportResponse) ProtoMessage()    {}
func (*TeleportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{21}
}

func (m *TeleportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TeleportResponse.Unmarshal(m, b)
}
func (m *TeleportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TeleportResponse.Marshal(b, m, deterministic)
}
func (m *TeleportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeleportResponse.Merge(m, src)
}
func (m *TeleportResponse) XXX_Size() int {
	return xxx_messageInfo_TeleportResponse.Size(m)
}
func (m *TeleportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeleportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeleportResponse proto.InternalMessageInfo

func (m *TeleportResponse) GetData() *TeleportServiceData {
	if m != nil {
		return m.Data
	}
	return nil
}

type TagReleaseRequest struct {
	BlockName            string   `protobuf:"bytes,1,opt,name=blockName,proto3" json:"blockName,omitempty"`
	ReleaseId            string   `protobuf:"bytes,2,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	EnvId                string   `protobuf:"bytes,3,opt,name=envId,proto3" json:"envId,omitempty"`
	Tag                  string   `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReleaseRequest) Reset()         { *m = TagReleaseRequest{} }
func (m *TagReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*TagReleaseRequest) ProtoMessage()    {}
func (*TagReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{22}
}

func (m *TagReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TagReleaseRequest.Unmarshal(m, b)
}
func (m *TagReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TagReleaseRequest.Marshal(b, m, deterministic)
}
func (m *TagReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReleaseRequest.Merge(m, src)
}
func (m *TagReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_TagReleaseRequest.Size(m)
}
func (m *TagReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TagReleaseRequest proto.InternalMessageInfo

func (m *TagReleaseRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *TagReleaseRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *TagReleaseRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *TagReleaseRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type PromoteReleaseRequest struct {
	EnvId                string   `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
	BlockName            string   `protobuf:"bytes,2,opt,name=blockName,proto3" json:"blockName,omitempty"`
	Tag                  string   `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	ReleaseId            string   `protobuf:"bytes,4,opt,name=releaseId,proto3" json:"releaseId,omitempty"`
	TargetEnvId          string   `protobuf:"bytes,5,opt,name=targetEnvId,proto3" json:"targetEnvId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromoteReleaseRequest) Reset()         { *m = PromoteReleaseRequest{} }
func (m *PromoteReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*PromoteReleaseRequest) ProtoMessage()    {}
func (*PromoteReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a250379670ac3748, []int{23}
}

func (m *PromoteReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PromoteReleaseRequest.Unmarshal(m, b)
}
func (m *PromoteReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PromoteReleaseRequest.Marshal(b, m, deterministic)
}
func (m *PromoteReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromoteReleaseRequest.Merge(m, src)
}
func (m *PromoteReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_PromoteReleaseRequest.Size(m)
}
func (m *PromoteReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PromoteReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PromoteReleaseRequest proto.InternalMessageInfo

func (m *PromoteReleaseRequest) GetEnvId() string {
	if m != nil {
		return m.EnvId
	}
	return ""
}

func (m *PromoteReleaseRequest) GetBlockName() string {
	if m != nil {
		return m.BlockName
	}
	return ""
}

func (m *PromoteReleaseRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *PromoteReleaseRequest) GetReleaseId() string {
	if m != nil {
		return m.ReleaseId
	}
	return ""
}

func (m *PromoteReleaseRequest) GetTargetEnvId() string {
	if m != nil {
		return m.TargetEnvId
	}
	return ""
}

func init() {
	proto.RegisterType((*EnvironmentQueryRequest)(nil), "EnvironmentQueryRequest")
	proto.RegisterType((*DeleteEnvironmentRequest)(nil), "DeleteEnvironmentRequest")
	proto.RegisterType((*CreateBlockRequest)(nil), "CreateBlockRequest")
	proto.RegisterType((*DeployBlockRequest)(nil), "DeployBlockRequest")
	proto.RegisterType((*SuspendBlockRequest)(nil), "SuspendBlockRequest")
	proto.RegisterType((*BlockQueryRequest)(nil), "BlockQueryRequest")
	proto.RegisterType((*DeleteBlockRequest)(nil), "DeleteBlockRequest")
	proto.RegisterType((*BlockUpdateResponse)(nil), "BlockUpdateResponse")
	proto.RegisterType((*WatchBuildLogsRequest)(nil), "WatchBuildLogsRequest")
	proto.RegisterType((*WatchConsoleLogsRequest)(nil), "WatchConsoleLogsRequest")
	proto.RegisterType((*UpdateBuildStatusRequest)(nil), "UpdateBuildStatusRequest")
	proto.RegisterType((*UpdateBuildStepRequest)(nil), "UpdateBuildStepRequest")
	proto.RegisterType((*UpdateBuildStatusResponse)(nil), "UpdateBuildStatusResponse")
	proto.RegisterType((*KillBlockInstanceRequest)(nil), "KillBlockInstanceRequest")
	proto.RegisterType((*RollbackBlockRequest)(nil), "RollbackBlockRequest")
	proto.RegisterType((*CustomDomainNameRequest)(nil), "CustomDomainNameRequest")
	proto.RegisterType((*CheckCustomDomainNameResponse)(nil), "CheckCustomDomainNameResponse")
	proto.RegisterType((*EnablePublicURLRequest)(nil), "EnablePublicURLRequest")
	proto.RegisterType((*DisablePublicURLRequest)(nil), "DisablePublicURLRequest")
	proto.RegisterType((*AbortBlockReleaseRequest)(nil), "AbortBlockReleaseRequest")
	proto.RegisterType((*TeleportRequest)(nil), "TeleportRequest")
	proto.RegisterType((*TeleportResponse)(nil), "TeleportResponse")
	proto.RegisterType((*TagReleaseRequest)(nil), "TagReleaseRequest")
	proto.RegisterType((*PromoteReleaseRequest)(nil), "PromoteReleaseRequest")
}

func init() {
	proto.RegisterFile("kintokubecore.proto", fileDescriptor_a250379670ac3748)
}

var fileDescriptor_a250379670ac3748 = []byte{
	// 1250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x6d, 0x27, 0xb5, 0x46, 0x8e, 0x2c, 0xad, 0x64, 0x99, 0x52, 0xd3, 0xc0, 0x20, 0x72,
	0x70, 0xd3, 0x76, 0x55, 0x38, 0x28, 0x50, 0xb4, 0x4e, 0x9a, 0x58, 0x52, 0x1c, 0xc7, 0x4e, 0x9a,
	0xd2, 0x09, 0x02, 0xf4, 0xd0, 0x62, 0x49, 0x4d, 0x64, 0x56, 0x14, 0x57, 0x25, 0x97, 0x29, 0xfc,
	0x1a, 0x3d, 0xf5, 0xd2, 0x67, 0xe8, 0x03, 0x14, 0x28, 0xfa, 0x68, 0x05, 0x97, 0xa4, 0x48, 0x51,
	0x24, 0x11, 0x38, 0x09, 0xd0, 0x1b, 0x77, 0x76, 0xe6, 0x9b, 0x9f, 0x9d, 0x9d, 0xfd, 0x40, 0x68,
	0x4d, 0x2d, 0x47, 0xf0, 0xa9, 0x6f, 0xa0, 0xc9, 0x5d, 0xa4, 0x73, 0x97, 0x0b, 0xde, 0xfb, 0x78,
	0xc2, 0xf9, 0xc4, 0xc6, 0xbe, 0x5c, 0x19, 0xfe, 0xeb, 0x3e, 0xce, 0xe6, 0xe2, 0x32, 0xda, 0x6c,
	0x4c, 0xa7, 0xe6, 0xcf, 0x33, 0x3e, 0x46, 0xdb, 0x0b, 0x25, 0xda, 0xa7, 0xb0, 0x3b, 0x72, 0xde,
	0x58, 0x2e, 0x77, 0x66, 0xe8, 0x88, 0x1f, 0x7c, 0x74, 0x2f, 0x75, 0xfc, 0xd5, 0x47, 0x4f, 0x90,
	0x3a, 0xac, 0x59, 0x63, 0x55, 0xd9, 0x53, 0xf6, 0xab, 0xfa, 0x9a, 0x35, 0xd6, 0xee, 0x80, 0x3a,
	0x44, 0x1b, 0x05, 0xa6, 0x0c, 0x8a, 0x74, 0xff, 0x50, 0x80, 0x0c, 0x5c, 0x64, 0x02, 0x8f, 0x6c,
	0x6e, 0x4e, 0x63, 0xb5, 0x36, 0x5c, 0x43, 0xe7, 0xcd, 0x49, 0xac, 0x19, 0x2e, 0x08, 0x81, 0x0d,
	0x87, 0xcd, 0x50, 0x5d, 0x93, 0x42, 0xf9, 0x4d, 0xf6, 0xa1, 0xea, 0xfa, 0xce, 0x80, 0x3b, 0xaf,
	0xad, 0x89, 0xba, 0xbe, 0xa7, 0xec, 0xd7, 0x0e, 0x80, 0xea, 0xb1, 0x44, 0x4f, 0x36, 0x09, 0x85,
	0x9a, 0xe1, 0x5b, 0xf6, 0x38, 0xd2, 0xdd, 0x90, 0xba, 0x5b, 0xf4, 0x28, 0x91, 0xe9, 0x69, 0x05,
	0xed, 0x1f, 0x05, 0xc8, 0x10, 0xe7, 0x36, 0xbf, 0xfc, 0xbf, 0x85, 0x46, 0x6e, 0xc3, 0x0d, 0x83,
	0x79, 0xa8, 0xa3, 0x8d, 0xcc, 0xc3, 0x93, 0xb1, 0x7a, 0x4d, 0xba, 0x5d, 0x16, 0x6a, 0xdf, 0x41,
	0xeb, 0xdc, 0xf7, 0xe6, 0xe8, 0x8c, 0xaf, 0x96, 0x80, 0x76, 0x0f, 0x9a, 0xd2, 0x72, 0xe9, 0xb4,
	0xdf, 0xde, 0xfc, 0x7e, 0x50, 0xbf, 0xa0, 0x0f, 0xae, 0xe8, 0xfe, 0x18, 0x5a, 0xd2, 0xf2, 0xe5,
	0x7c, 0xcc, 0x04, 0xea, 0xe8, 0xcd, 0xb9, 0xe3, 0xe1, 0x42, 0x55, 0x49, 0x95, 0xfa, 0x26, 0x54,
	0xdd, 0x45, 0x31, 0x42, 0x8c, 0x44, 0xa0, 0x59, 0xb0, 0xf3, 0x8a, 0x09, 0xf3, 0x42, 0xd6, 0xf3,
	0x8c, 0x4f, 0xbc, 0x38, 0x96, 0x25, 0x33, 0x25, 0x63, 0x16, 0xec, 0x1a, 0x81, 0xff, 0x67, 0x49,
	0x60, 0x89, 0x20, 0xc9, 0x63, 0x3d, 0x95, 0x87, 0xf6, 0x14, 0x76, 0xa5, 0xab, 0x01, 0x77, 0x3c,
	0x6e, 0x63, 0xc6, 0x59, 0x02, 0xa7, 0x14, 0xc2, 0xad, 0xa5, 0xe1, 0x7e, 0x57, 0x40, 0x0d, 0xd3,
	0x97, 0xb1, 0x9f, 0x0b, 0x26, 0xfc, 0x77, 0x01, 0x5c, 0xce, 0x78, 0x3d, 0x9b, 0xf1, 0x6d, 0xb8,
	0xee, 0x49, 0x17, 0xb2, 0xa1, 0x16, 0x2d, 0x18, 0xb9, 0x8d, 0xf6, 0x34, 0x1d, 0x3a, 0x4b, 0x31,
	0xe1, 0x3c, 0x8e, 0x28, 0xef, 0x68, 0x12, 0xcc, 0xb5, 0x12, 0xcc, 0xcf, 0xa0, 0x9b, 0x93, 0x67,
	0x74, 0xe2, 0xd9, 0xa1, 0xf1, 0x00, 0xd4, 0x53, 0xcb, 0xb6, 0x65, 0x73, 0x9c, 0x38, 0x9e, 0x60,
	0x8e, 0x89, 0x05, 0x03, 0xa6, 0xa0, 0xae, 0x3f, 0x41, 0x5b, 0xe7, 0xb6, 0x6d, 0x30, 0x73, 0xba,
	0xd4, 0x9c, 0x79, 0x09, 0x5c, 0xa1, 0x90, 0xda, 0xbf, 0x0a, 0xec, 0x0e, 0x7c, 0x4f, 0xf0, 0xd9,
	0x90, 0xcf, 0x98, 0xe5, 0x04, 0x27, 0x52, 0x7e, 0x01, 0xca, 0x9b, 0xed, 0x0e, 0x34, 0xcc, 0x0c,
	0x5c, 0xe4, 0x74, 0x45, 0x1e, 0xe0, 0x0f, 0x9e, 0x3d, 0x7c, 0x3a, 0x92, 0x63, 0xa4, 0xaa, 0x87,
	0x0b, 0xd2, 0x87, 0x4d, 0x39, 0xc8, 0x4d, 0x6e, 0xcb, 0xc3, 0xad, 0x1f, 0xb4, 0x92, 0x59, 0x44,
	0x9f, 0x47, 0x5b, 0xfa, 0x42, 0x49, 0xfb, 0x4b, 0x81, 0x4f, 0x06, 0x17, 0x68, 0x4e, 0x57, 0xf3,
	0x88, 0x8e, 0xe5, 0x26, 0x54, 0x2d, 0x4f, 0xa2, 0x7f, 0x7f, 0x2a, 0x93, 0xd9, 0xd4, 0x13, 0x01,
	0xd9, 0x83, 0x9a, 0xfc, 0x7c, 0xc5, 0x1c, 0x81, 0x71, 0xf1, 0xd2, 0x22, 0x72, 0x0b, 0x40, 0x2e,
	0x1f, 0x71, 0xdf, 0x89, 0x6b, 0x98, 0x92, 0x10, 0x0a, 0xc4, 0xf2, 0x06, 0xe8, 0x0a, 0xeb, 0xb5,
	0x65, 0xca, 0x09, 0xc0, 0xc6, 0x97, 0x32, 0xab, 0x4d, 0x3d, 0x67, 0x47, 0xfb, 0x05, 0x3a, 0x23,
	0x87, 0x19, 0x36, 0x3e, 0xf7, 0x0d, 0xdb, 0x32, 0x5f, 0xea, 0x67, 0x1f, 0xec, 0xa6, 0x04, 0xf7,
	0x7c, 0x68, 0x79, 0xef, 0xcb, 0x99, 0x66, 0x83, 0xfa, 0xd0, 0xe0, 0xae, 0x88, 0x9a, 0x51, 0x7a,
	0x79, 0x3b, 0xbc, 0xd2, 0xc9, 0x57, 0x30, 0xa4, 0x46, 0xb0, 0xfd, 0x02, 0x6d, 0x9c, 0x73, 0x57,
	0xbc, 0x43, 0x53, 0x6a, 0x87, 0xd0, 0x48, 0x60, 0xa2, 0x9e, 0xd8, 0x87, 0x8d, 0x31, 0x13, 0x4c,
	0xc2, 0xd4, 0x0e, 0xda, 0x34, 0x56, 0x38, 0x47, 0xf7, 0x8d, 0x65, 0xe2, 0x90, 0x09, 0xa6, 0x4b,
	0x0d, 0xed, 0x37, 0x68, 0xbe, 0x60, 0x93, 0x0f, 0x9d, 0x2b, 0x69, 0xc0, 0xba, 0x60, 0x93, 0xe8,
	0x2e, 0x04, 0x9f, 0xda, 0x9f, 0x0a, 0xec, 0x3c, 0x77, 0xf9, 0x8c, 0x0b, 0xcc, 0x78, 0xbf, 0xca,
	0xcd, 0x8c, 0xf0, 0xd7, 0x17, 0xf8, 0xcb, 0x51, 0x6e, 0x64, 0xa3, 0xdc, 0x83, 0x9a, 0x60, 0xee,
	0x04, 0xc5, 0x48, 0x7a, 0x0a, 0x1f, 0xee, 0xb4, 0xe8, 0xe0, 0xef, 0x3a, 0xb4, 0x4f, 0x03, 0xc2,
	0x76, 0xea, 0x1b, 0x38, 0xe0, 0x2e, 0x46, 0xb5, 0x23, 0xdf, 0x42, 0x33, 0xa4, 0x4a, 0x29, 0x5e,
	0x45, 0x3a, 0x34, 0xe4, 0x71, 0x34, 0xe6, 0x71, 0x74, 0x14, 0xf0, 0xb8, 0xde, 0x16, 0x4d, 0x69,
	0x69, 0x15, 0xf2, 0x0d, 0xd4, 0x8f, 0xa5, 0x87, 0x85, 0xa5, 0x4a, 0x0b, 0x08, 0xdd, 0x8a, 0xed,
	0x63, 0x68, 0xae, 0x10, 0x3a, 0xd2, 0xa5, 0x45, 0x24, 0xaf, 0x57, 0x10, 0x93, 0x8c, 0xa2, 0x96,
	0x62, 0x7b, 0xa4, 0x45, 0x57, 0xb9, 0x5f, 0xaf, 0x4d, 0x73, 0x5e, 0x7d, 0xad, 0x42, 0x1e, 0x04,
	0x51, 0x2c, 0xe8, 0x58, 0xb8, 0x4d, 0x5a, 0x74, 0x95, 0xa2, 0x15, 0x22, 0xdc, 0x87, 0x1b, 0x4b,
	0x53, 0x9f, 0xec, 0xd0, 0xbc, 0x57, 0xa0, 0xd0, 0xfe, 0x0e, 0x54, 0x8f, 0x31, 0xbc, 0xa3, 0x1e,
	0x21, 0x74, 0x85, 0x1b, 0xf5, 0x3e, 0x0a, 0x65, 0x9e, 0x56, 0x21, 0xfb, 0xb0, 0x19, 0xeb, 0xe6,
	0xaa, 0x5e, 0x0f, 0x65, 0x5a, 0x85, 0x1c, 0x42, 0x2d, 0x45, 0x93, 0x64, 0x46, 0x59, 0xd2, 0x54,
	0x52, 0xd1, 0x43, 0xd8, 0x4a, 0x93, 0x3c, 0xd2, 0xa6, 0x39, 0x9c, 0xaf, 0xa4, 0x22, 0x2d, 0x49,
	0x57, 0xa2, 0x8b, 0xe0, 0x85, 0x0f, 0x6f, 0x6e, 0xc0, 0xdb, 0x74, 0x59, 0x49, 0xab, 0x7c, 0xa9,
	0x04, 0x9d, 0xb1, 0xf2, 0x12, 0x93, 0x2e, 0x2d, 0x7a, 0x9d, 0x4b, 0xf2, 0x18, 0xc0, 0x96, 0x9c,
	0x80, 0x91, 0x13, 0xd2, 0xa5, 0x45, 0x03, 0xb1, 0xb4, 0xbd, 0x20, 0x99, 0x29, 0x84, 0xd0, 0x95,
	0x01, 0x53, 0x62, 0x7b, 0x04, 0xf5, 0xe5, 0xa9, 0x40, 0x3a, 0x34, 0x77, 0x4c, 0x94, 0x60, 0xdc,
	0x85, 0xfa, 0x32, 0xd1, 0x24, 0x1d, 0x9a, 0xcb, 0x3c, 0x7b, 0xd7, 0x68, 0xb0, 0x92, 0x35, 0x3c,
	0x83, 0xe6, 0x0a, 0xf5, 0x21, 0x5d, 0x5a, 0x44, 0xfb, 0x7a, 0x3d, 0x5a, 0xc8, 0x94, 0xb4, 0x0a,
	0x39, 0x81, 0x6e, 0xe8, 0x51, 0x36, 0xe2, 0x63, 0x64, 0xb6, 0xb8, 0x08, 0x95, 0xd0, 0x2b, 0xb9,
	0xf2, 0xf5, 0xf0, 0xc4, 0x63, 0x4d, 0x19, 0xd8, 0x57, 0xb0, 0x2d, 0xa1, 0x9e, 0x70, 0xa3, 0xac,
	0x31, 0x80, 0x3e, 0xe1, 0x46, 0xaa, 0x27, 0x0e, 0x81, 0xa4, 0x22, 0x78, 0x8a, 0xc2, 0xb5, 0xcc,
	0x7c, 0xcb, 0xc8, 0x69, 0xac, 0x23, 0xad, 0xef, 0x41, 0x23, 0x4b, 0xa0, 0x89, 0x4a, 0x0b, 0x38,
	0x75, 0xaf, 0x46, 0x13, 0xa1, 0x34, 0x7f, 0x04, 0x3b, 0xc7, 0x28, 0xe4, 0xf8, 0x0c, 0xa9, 0x8d,
	0xef, 0x32, 0x61, 0x71, 0xa7, 0x70, 0x4e, 0xb6, 0xe8, 0xaa, 0xb2, 0x56, 0x21, 0x67, 0xd0, 0x09,
	0x47, 0x53, 0x96, 0xfd, 0x10, 0x95, 0x16, 0x10, 0xbb, 0x92, 0xbe, 0x38, 0x83, 0x4e, 0x78, 0xa9,
	0xdf, 0x0b, 0xda, 0x39, 0xec, 0xe4, 0x12, 0xb3, 0x12, 0xb0, 0x5b, 0xb4, 0x94, 0xca, 0x69, 0x15,
	0x32, 0x84, 0xed, 0x0c, 0x79, 0x22, 0xbb, 0x34, 0x9f, 0x4e, 0x95, 0x84, 0xf6, 0x08, 0x1a, 0x59,
	0x5a, 0x44, 0x54, 0x5a, 0xc0, 0x94, 0x4a, 0x70, 0xbe, 0x86, 0x1b, 0xe7, 0x82, 0xb9, 0x22, 0xa6,
	0x0f, 0xa4, 0x41, 0x33, 0x8c, 0xa5, 0xd7, 0xa4, 0x59, 0xf2, 0x11, 0x34, 0xc0, 0x11, 0xfd, 0xf1,
	0xf3, 0x89, 0x25, 0x2e, 0x7c, 0x83, 0x9a, 0x7c, 0xd6, 0x97, 0x3f, 0x3e, 0x2e, 0x7c, 0x23, 0xfc,
	0xf8, 0xc2, 0xb4, 0xad, 0xbe, 0xe5, 0x08, 0x74, 0x1d, 0x66, 0xf7, 0xc5, 0xe5, 0x1c, 0x3d, 0xe3,
	0xba, 0xf4, 0x7d, 0xf7, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x31, 0xdb, 0xbf, 0x24, 0x11,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KintoKubeCoreServiceClient is the client API for KintoKubeCoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KintoKubeCoreServiceClient interface {
	CreateEnvironment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Environment, error)
	GetEnvironment(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (*Environment, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	DeployBlockUpdate(ctx context.Context, in *DeployBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	RollbackBlock(ctx context.Context, in *RollbackBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	GetBlocks(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Blocks, error)
	GetBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Block, error)
	DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SuspendBlock(ctx context.Context, in *SuspendBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error)
	WatchReleasesStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchReleasesStatusClient, error)
	KillBlockInstance(ctx context.Context, in *KillBlockInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AbortRelease(ctx context.Context, in *AbortBlockReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	TagRelease(ctx context.Context, in *TagReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	PromoteRelease(ctx context.Context, in *PromoteReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	WatchBuildLogs(ctx context.Context, in *WatchBuildLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBuildLogsClient, error)
	UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest, opts ...grpc.CallOption) (*UpdateBuildStatusResponse, error)
	WatchBlocksHealthStatuses(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksHealthStatusesClient, error)
	WatchJobsStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchJobsStatusClient, error)
	WatchBlocksMetrics(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksMetricsClient, error)
	WatchConsoleLogs(ctx context.Context, in *WatchConsoleLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchConsoleLogsClient, error)
	GetKintoConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KintoConfiguration, error)
	CreateCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*CheckCustomDomainNameResponse, error)
	EnablePublicURL(ctx context.Context, in *EnablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DisablePublicURL(ctx context.Context, in *DisablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StartTeleport(ctx context.Context, in *TeleportRequest, opts ...grpc.CallOption) (KintoKubeCoreService_StartTeleportClient, error)
}

type kintoKubeCoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKintoKubeCoreServiceClient(cc grpc.ClientConnInterface) KintoKubeCoreServiceClient {
	return &kintoKubeCoreServiceClient{cc}
}

func (c *kintoKubeCoreServiceClient) CreateEnvironment(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CreateEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) GetEnvironment(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (*Environment, error) {
	out := new(Environment)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeleteEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) CreateBlock(ctx context.Context, in *CreateBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CreateBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeployBlockUpdate(ctx context.Context, in *DeployBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeployBlockUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) RollbackBlock(ctx context.Context, in *RollbackBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/RollbackBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) GetBlocks(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Blocks, error) {
	out := new(Blocks)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) GetBlock(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeleteBlock(ctx context.Context, in *DeleteBlockRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeleteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) SuspendBlock(ctx context.Context, in *SuspendBlockRequest, opts ...grpc.CallOption) (*BlockUpdateResponse, error) {
	out := new(BlockUpdateResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/SuspendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) WatchReleasesStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchReleasesStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[0], "/KintoKubeCoreService/WatchReleasesStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchReleasesStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchReleasesStatusClient interface {
	Recv() (*ReleasesStatus, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchReleasesStatusClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchReleasesStatusClient) Recv() (*ReleasesStatus, error) {
	m := new(ReleasesStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) KillBlockInstance(ctx context.Context, in *KillBlockInstanceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/KillBlockInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) AbortRelease(ctx context.Context, in *AbortBlockReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/AbortRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) TagRelease(ctx context.Context, in *TagReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/TagRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) PromoteRelease(ctx context.Context, in *PromoteReleaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/PromoteRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) WatchBuildLogs(ctx context.Context, in *WatchBuildLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBuildLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[1], "/KintoKubeCoreService/WatchBuildLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchBuildLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchBuildLogsClient interface {
	Recv() (*Logs, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchBuildLogsClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchBuildLogsClient) Recv() (*Logs, error) {
	m := new(Logs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) UpdateBuildStatus(ctx context.Context, in *UpdateBuildStatusRequest, opts ...grpc.CallOption) (*UpdateBuildStatusResponse, error) {
	out := new(UpdateBuildStatusResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/UpdateBuildStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) WatchBlocksHealthStatuses(ctx context.Context, in *EnvironmentQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksHealthStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[2], "/KintoKubeCoreService/WatchBlocksHealthStatuses", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchBlocksHealthStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchBlocksHealthStatusesClient interface {
	Recv() (*BlockStatuses, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchBlocksHealthStatusesClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchBlocksHealthStatusesClient) Recv() (*BlockStatuses, error) {
	m := new(BlockStatuses)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) WatchJobsStatus(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchJobsStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[3], "/KintoKubeCoreService/WatchJobsStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchJobsStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchJobsStatusClient interface {
	Recv() (*JobStatus, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchJobsStatusClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchJobsStatusClient) Recv() (*JobStatus, error) {
	m := new(JobStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) WatchBlocksMetrics(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchBlocksMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[4], "/KintoKubeCoreService/WatchBlocksMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchBlocksMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchBlocksMetricsClient interface {
	Recv() (*BlocksMetrics, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchBlocksMetricsClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchBlocksMetricsClient) Recv() (*BlocksMetrics, error) {
	m := new(BlocksMetrics)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) WatchConsoleLogs(ctx context.Context, in *WatchConsoleLogsRequest, opts ...grpc.CallOption) (KintoKubeCoreService_WatchConsoleLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[5], "/KintoKubeCoreService/WatchConsoleLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceWatchConsoleLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_WatchConsoleLogsClient interface {
	Recv() (*ConsoleLog, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceWatchConsoleLogsClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceWatchConsoleLogsClient) Recv() (*ConsoleLog, error) {
	m := new(ConsoleLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kintoKubeCoreServiceClient) GetKintoConfiguration(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KintoConfiguration, error) {
	out := new(KintoConfiguration)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/GetKintoConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) CreateCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CreateCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DeleteCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DeleteCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) CheckCustomDomainName(ctx context.Context, in *CustomDomainNameRequest, opts ...grpc.CallOption) (*CheckCustomDomainNameResponse, error) {
	out := new(CheckCustomDomainNameResponse)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/CheckCustomDomainName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) EnablePublicURL(ctx context.Context, in *EnablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/EnablePublicURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) DisablePublicURL(ctx context.Context, in *DisablePublicURLRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/KintoKubeCoreService/DisablePublicURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kintoKubeCoreServiceClient) StartTeleport(ctx context.Context, in *TeleportRequest, opts ...grpc.CallOption) (KintoKubeCoreService_StartTeleportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KintoKubeCoreService_serviceDesc.Streams[6], "/KintoKubeCoreService/StartTeleport", opts...)
	if err != nil {
		return nil, err
	}
	x := &kintoKubeCoreServiceStartTeleportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KintoKubeCoreService_StartTeleportClient interface {
	Recv() (*TeleportResponse, error)
	grpc.ClientStream
}

type kintoKubeCoreServiceStartTeleportClient struct {
	grpc.ClientStream
}

func (x *kintoKubeCoreServiceStartTeleportClient) Recv() (*TeleportResponse, error) {
	m := new(TeleportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KintoKubeCoreServiceServer is the server API for KintoKubeCoreService service.
type KintoKubeCoreServiceServer interface {
	CreateEnvironment(context.Context, *empty.Empty) (*Environment, error)
	GetEnvironment(context.Context, *EnvironmentQueryRequest) (*Environment, error)
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*empty.Empty, error)
	CreateBlock(context.Context, *CreateBlockRequest) (*BlockUpdateResponse, error)
	DeployBlockUpdate(context.Context, *DeployBlockRequest) (*BlockUpdateResponse, error)
	RollbackBlock(context.Context, *RollbackBlockRequest) (*BlockUpdateResponse, error)
	GetBlocks(context.Context, *BlockQueryRequest) (*Blocks, error)
	GetBlock(context.Context, *BlockQueryRequest) (*Block, error)
	DeleteBlock(context.Context, *DeleteBlockRequest) (*empty.Empty, error)
	SuspendBlock(context.Context, *SuspendBlockRequest) (*BlockUpdateResponse, error)
	WatchReleasesStatus(*BlockQueryRequest, KintoKubeCoreService_WatchReleasesStatusServer) error
	KillBlockInstance(context.Context, *KillBlockInstanceRequest) (*empty.Empty, error)
	AbortRelease(context.Context, *AbortBlockReleaseRequest) (*empty.Empty, error)
	TagRelease(context.Context, *TagReleaseRequest) (*empty.Empty, error)
	PromoteRelease(context.Context, *PromoteReleaseRequest) (*empty.Empty, error)
	WatchBuildLogs(*WatchBuildLogsRequest, KintoKubeCoreService_WatchBuildLogsServer) error
	UpdateBuildStatus(context.Context, *UpdateBuildStatusRequest) (*UpdateBuildStatusResponse, error)
	WatchBlocksHealthStatuses(*EnvironmentQueryRequest, KintoKubeCoreService_WatchBlocksHealthStatusesServer) error
	WatchJobsStatus(*BlockQueryRequest, KintoKubeCoreService_WatchJobsStatusServer) error
	WatchBlocksMetrics(*BlockQueryRequest, KintoKubeCoreService_WatchBlocksMetricsServer) error
	WatchConsoleLogs(*WatchConsoleLogsRequest, KintoKubeCoreService_WatchConsoleLogsServer) error
	GetKintoConfiguration(context.Context, *empty.Empty) (*KintoConfiguration, error)
	CreateCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error)
	DeleteCustomDomainName(context.Context, *CustomDomainNameRequest) (*empty.Empty, error)
	CheckCustomDomainName(context.Context, *CustomDomainNameRequest) (*CheckCustomDomainNameResponse, error)
	EnablePublicURL(context.Context, *EnablePublicURLRequest) (*empty.Empty, error)
	DisablePublicURL(context.Context, *DisablePublicURLRequest) (*empty.Empty, error)
	StartTeleport(*TeleportRequest, KintoKubeCoreService_StartTeleportServer) error
}

// UnimplementedKintoKubeCoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKintoKubeCoreServiceServer struct {
}

func (*UnimplementedKintoKubeCoreServiceServer) CreateEnvironment(ctx context.Context, req *empty.Empty) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetEnvironment(ctx context.Context, req *EnvironmentQueryRequest) (*Environment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironment not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeleteEnvironment(ctx context.Context, req *DeleteEnvironmentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) CreateBlock(ctx context.Context, req *CreateBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeployBlockUpdate(ctx context.Context, req *DeployBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployBlockUpdate not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) RollbackBlock(ctx context.Context, req *RollbackBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetBlocks(ctx context.Context, req *BlockQueryRequest) (*Blocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetBlock(ctx context.Context, req *BlockQueryRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeleteBlock(ctx context.Context, req *DeleteBlockRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) SuspendBlock(ctx context.Context, req *SuspendBlockRequest) (*BlockUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuspendBlock not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchReleasesStatus(req *BlockQueryRequest, srv KintoKubeCoreService_WatchReleasesStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchReleasesStatus not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) KillBlockInstance(ctx context.Context, req *KillBlockInstanceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillBlockInstance not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) AbortRelease(ctx context.Context, req *AbortBlockReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortRelease not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) TagRelease(ctx context.Context, req *TagReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagRelease not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) PromoteRelease(ctx context.Context, req *PromoteReleaseRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteRelease not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchBuildLogs(req *WatchBuildLogsRequest, srv KintoKubeCoreService_WatchBuildLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBuildLogs not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) UpdateBuildStatus(ctx context.Context, req *UpdateBuildStatusRequest) (*UpdateBuildStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuildStatus not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchBlocksHealthStatuses(req *EnvironmentQueryRequest, srv KintoKubeCoreService_WatchBlocksHealthStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocksHealthStatuses not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchJobsStatus(req *BlockQueryRequest, srv KintoKubeCoreService_WatchJobsStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchJobsStatus not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchBlocksMetrics(req *BlockQueryRequest, srv KintoKubeCoreService_WatchBlocksMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocksMetrics not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) WatchConsoleLogs(req *WatchConsoleLogsRequest, srv KintoKubeCoreService_WatchConsoleLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConsoleLogs not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) GetKintoConfiguration(ctx context.Context, req *empty.Empty) (*KintoConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKintoConfiguration not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) CreateCustomDomainName(ctx context.Context, req *CustomDomainNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomDomainName not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DeleteCustomDomainName(ctx context.Context, req *CustomDomainNameRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomDomainName not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) CheckCustomDomainName(ctx context.Context, req *CustomDomainNameRequest) (*CheckCustomDomainNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCustomDomainName not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) EnablePublicURL(ctx context.Context, req *EnablePublicURLRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePublicURL not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) DisablePublicURL(ctx context.Context, req *DisablePublicURLRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePublicURL not implemented")
}
func (*UnimplementedKintoKubeCoreServiceServer) StartTeleport(req *TeleportRequest, srv KintoKubeCoreService_StartTeleportServer) error {
	return status.Errorf(codes.Unimplemented, "method StartTeleport not implemented")
}

func RegisterKintoKubeCoreServiceServer(s *grpc.Server, srv KintoKubeCoreServiceServer) {
	s.RegisterService(&_KintoKubeCoreService_serviceDesc, srv)
}

func _KintoKubeCoreService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CreateEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CreateEnvironment(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_GetEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetEnvironment(ctx, req.(*EnvironmentQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeleteEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_CreateBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CreateBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CreateBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CreateBlock(ctx, req.(*CreateBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeployBlockUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeployBlockUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeployBlockUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeployBlockUpdate(ctx, req.(*DeployBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_RollbackBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).RollbackBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/RollbackBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).RollbackBlock(ctx, req.(*RollbackBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetBlocks(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetBlock(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeleteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeleteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeleteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeleteBlock(ctx, req.(*DeleteBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_SuspendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuspendBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).SuspendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/SuspendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).SuspendBlock(ctx, req.(*SuspendBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_WatchReleasesStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchReleasesStatus(m, &kintoKubeCoreServiceWatchReleasesStatusServer{stream})
}

type KintoKubeCoreService_WatchReleasesStatusServer interface {
	Send(*ReleasesStatus) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchReleasesStatusServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchReleasesStatusServer) Send(m *ReleasesStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_KillBlockInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillBlockInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).KillBlockInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/KillBlockInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).KillBlockInstance(ctx, req.(*KillBlockInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_AbortRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortBlockReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).AbortRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/AbortRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).AbortRelease(ctx, req.(*AbortBlockReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_TagRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).TagRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/TagRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).TagRelease(ctx, req.(*TagReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_PromoteRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).PromoteRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/PromoteRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).PromoteRelease(ctx, req.(*PromoteReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_WatchBuildLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBuildLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchBuildLogs(m, &kintoKubeCoreServiceWatchBuildLogsServer{stream})
}

type KintoKubeCoreService_WatchBuildLogsServer interface {
	Send(*Logs) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchBuildLogsServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchBuildLogsServer) Send(m *Logs) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_UpdateBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuildStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).UpdateBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/UpdateBuildStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).UpdateBuildStatus(ctx, req.(*UpdateBuildStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_WatchBlocksHealthStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnvironmentQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchBlocksHealthStatuses(m, &kintoKubeCoreServiceWatchBlocksHealthStatusesServer{stream})
}

type KintoKubeCoreService_WatchBlocksHealthStatusesServer interface {
	Send(*BlockStatuses) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchBlocksHealthStatusesServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchBlocksHealthStatusesServer) Send(m *BlockStatuses) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_WatchJobsStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchJobsStatus(m, &kintoKubeCoreServiceWatchJobsStatusServer{stream})
}

type KintoKubeCoreService_WatchJobsStatusServer interface {
	Send(*JobStatus) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchJobsStatusServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchJobsStatusServer) Send(m *JobStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_WatchBlocksMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchBlocksMetrics(m, &kintoKubeCoreServiceWatchBlocksMetricsServer{stream})
}

type KintoKubeCoreService_WatchBlocksMetricsServer interface {
	Send(*BlocksMetrics) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchBlocksMetricsServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchBlocksMetricsServer) Send(m *BlocksMetrics) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_WatchConsoleLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConsoleLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).WatchConsoleLogs(m, &kintoKubeCoreServiceWatchConsoleLogsServer{stream})
}

type KintoKubeCoreService_WatchConsoleLogsServer interface {
	Send(*ConsoleLog) error
	grpc.ServerStream
}

type kintoKubeCoreServiceWatchConsoleLogsServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceWatchConsoleLogsServer) Send(m *ConsoleLog) error {
	return x.ServerStream.SendMsg(m)
}

func _KintoKubeCoreService_GetKintoConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).GetKintoConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/GetKintoConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).GetKintoConfiguration(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_CreateCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CreateCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CreateCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CreateCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DeleteCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DeleteCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DeleteCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DeleteCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_CheckCustomDomainName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomDomainNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).CheckCustomDomainName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/CheckCustomDomainName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).CheckCustomDomainName(ctx, req.(*CustomDomainNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_EnablePublicURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePublicURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).EnablePublicURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/EnablePublicURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).EnablePublicURL(ctx, req.(*EnablePublicURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_DisablePublicURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePublicURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KintoKubeCoreServiceServer).DisablePublicURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KintoKubeCoreService/DisablePublicURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KintoKubeCoreServiceServer).DisablePublicURL(ctx, req.(*DisablePublicURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KintoKubeCoreService_StartTeleport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TeleportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KintoKubeCoreServiceServer).StartTeleport(m, &kintoKubeCoreServiceStartTeleportServer{stream})
}

type KintoKubeCoreService_StartTeleportServer interface {
	Send(*TeleportResponse) error
	grpc.ServerStream
}

type kintoKubeCoreServiceStartTeleportServer struct {
	grpc.ServerStream
}

func (x *kintoKubeCoreServiceStartTeleportServer) Send(m *TeleportResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _KintoKubeCoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "KintoKubeCoreService",
	HandlerType: (*KintoKubeCoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnvironment",
			Handler:    _KintoKubeCoreService_CreateEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironment",
			Handler:    _KintoKubeCoreService_GetEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _KintoKubeCoreService_DeleteEnvironment_Handler,
		},
		{
			MethodName: "CreateBlock",
			Handler:    _KintoKubeCoreService_CreateBlock_Handler,
		},
		{
			MethodName: "DeployBlockUpdate",
			Handler:    _KintoKubeCoreService_DeployBlockUpdate_Handler,
		},
		{
			MethodName: "RollbackBlock",
			Handler:    _KintoKubeCoreService_RollbackBlock_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _KintoKubeCoreService_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _KintoKubeCoreService_GetBlock_Handler,
		},
		{
			MethodName: "DeleteBlock",
			Handler:    _KintoKubeCoreService_DeleteBlock_Handler,
		},
		{
			MethodName: "SuspendBlock",
			Handler:    _KintoKubeCoreService_SuspendBlock_Handler,
		},
		{
			MethodName: "KillBlockInstance",
			Handler:    _KintoKubeCoreService_KillBlockInstance_Handler,
		},
		{
			MethodName: "AbortRelease",
			Handler:    _KintoKubeCoreService_AbortRelease_Handler,
		},
		{
			MethodName: "TagRelease",
			Handler:    _KintoKubeCoreService_TagRelease_Handler,
		},
		{
			MethodName: "PromoteRelease",
			Handler:    _KintoKubeCoreService_PromoteRelease_Handler,
		},
		{
			MethodName: "UpdateBuildStatus",
			Handler:    _KintoKubeCoreService_UpdateBuildStatus_Handler,
		},
		{
			MethodName: "GetKintoConfiguration",
			Handler:    _KintoKubeCoreService_GetKintoConfiguration_Handler,
		},
		{
			MethodName: "CreateCustomDomainName",
			Handler:    _KintoKubeCoreService_CreateCustomDomainName_Handler,
		},
		{
			MethodName: "DeleteCustomDomainName",
			Handler:    _KintoKubeCoreService_DeleteCustomDomainName_Handler,
		},
		{
			MethodName: "CheckCustomDomainName",
			Handler:    _KintoKubeCoreService_CheckCustomDomainName_Handler,
		},
		{
			MethodName: "EnablePublicURL",
			Handler:    _KintoKubeCoreService_EnablePublicURL_Handler,
		},
		{
			MethodName: "DisablePublicURL",
			Handler:    _KintoKubeCoreService_DisablePublicURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchReleasesStatus",
			Handler:       _KintoKubeCoreService_WatchReleasesStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBuildLogs",
			Handler:       _KintoKubeCoreService_WatchBuildLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocksHealthStatuses",
			Handler:       _KintoKubeCoreService_WatchBlocksHealthStatuses_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchJobsStatus",
			Handler:       _KintoKubeCoreService_WatchJobsStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocksMetrics",
			Handler:       _KintoKubeCoreService_WatchBlocksMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchConsoleLogs",
			Handler:       _KintoKubeCoreService_WatchConsoleLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartTeleport",
			Handler:       _KintoKubeCoreService_StartTeleport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kintokubecore.proto",
}
